{"characterId":52270,"noteId":38,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreihjqs437azc2u32alod2m4yqs7wc2ecsfyxzeljnix5jpeo7d3wj4","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:39:04.000Z","updatedAt":"2023-04-05T07:43:46.000Z","deletedAt":null,"publishedAt":"2022-05-07T13:35:01.000Z","transactionHash":"0xdc576b85b753d220cd2851aa2bc5e951b6f739ada0a82dfd613ec82afbd0296e","blockNumber":30317649,"logIndex":4,"updatedTransactionHash":"0xc2f6c641175813382fa987145f0e0417bcebc170a994328489a39c1a9eb37218","updatedBlockNumber":30321531,"updatedLogIndex":0,"metadata":{"uri":"ipfs://bafkreihjqs437azc2u32alod2m4yqs7wc2ecsfyxzeljnix5jpeo7d3wj4","type":"NOTE","content":{"tags":["post","后端","Go","青训营"],"type":"note","title":"Go语言初上手(一) 环境配置与基础语法 | 青训营","content":"---\ntitle: Go语言初上手(一) 环境配置与基础语法 | 青训营\nlink: back-end/go_learning_1\ncatalog: true\nlang: cn\ndate: 2022-05-07 13:35:01\nsubtitle: Go语言基本语法，与c++和JS的区别与类似点\nquiz: true\ntags:\n- 后端\n- Go\ncategories:\n- [笔记, 青训营笔记]\n---\n\n字节第三届青训营是后端专场，开课了，高高兴兴写笔记啦\n课上很详细的讲了Go的基本语法，以及再加上自己阅读Go语言圣经的一些总结，得出了这一篇文章，感觉跟JS和c/c++还是有很多共通之处的。\n\n<!-- more -->\n\n内容来源于：[Go语言圣经](https://books.studygolang.com/gopl-zh/ch2/ch2.html) 以及 第三届青训营课程\n课程源码 [wangkechun/go-by-example](https://github.com/wangkechun/go-by-example)\n# Go 语言简介及安装\n## 什么是Go语言\n- 高性能、高并发\n- 丰富的标准库\n- 完善的工具链\n- 静态链接\n- 快速编译\n- **跨平台**\n- **垃圾回收**\n\n总而言之，兼顾c/c++的性能，并具有python等语言的简洁、完善的标准库\n## 安装\n> 1. 访问 https://go.dev/ ，点击 Download ，下载对应平台安装包，安装即可\n> 2. 如果无法访问上述网址，可以改为访问 https://studygolang.com/dl 下载安装\n> 3. 如果访问 github 速度比较慢，建议配置 go mod proxy，参考 https://goproxy.cn/ 里面的描述配置，下载第三方依赖包的速度可以大大加快\n## IDE推荐\n- vscode 安装Go插件\n- [GoLand](https://www.jetbrains.com/go/) JetBrains系列的新IDE，dddd\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85a838397c9e4ba6a6f4338cd27138f7~tplv-k3u1fbpfcp-watermark.image?)\n\n可以通过Github很方便的登录体验该课程的示例项目 [Dashboard — Gitpod](https://gitpod.io/#github.com/wangkechun/go-by-example) （真好，我哭死）\n# 基础数据类型\n## 整型\n与c++中类似，整型分有符号和无符号类型，有符号整数\n- int8、int16、int32和int64\n- 对应8位、16位、32位、64位大小的**有符号整数**\n- uint8、uint16、uint32和uint64则对应**无符号整数**\n- 另外的还有两种对应特定CPU平台**机器字大小**的有符号和无符号整数`int`和`uint`，其中`int`也是应用最广泛的数值类型，这两种类型都有同样的大小: 32或64bit\n    - 不同的编译器即使在相同的硬件平台上可能产生不同的大小。\n- Unicode字符 `rune` 类型是和 `int32`**等价**的类型，通常用于**表示一个Unicode码点**。这两个名称可以互换使用。\n- `byte` 是 `uint8` 类型的等价类型，`byte` 类型一般用于强调数值是一个原始的数据而不是一个小的整数。\n- `uintptr` 类型，**没有指定具体的bit大小但是足以容纳指针**。只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。我们将在第十三章的unsafe包相关部分看到类似的例子\n\n可通过 `Printf` 函数的 `%b` 参数打印**二进制格式**的数字，用`%d`、`%o` 或 `%x`参数控制输出的进制格式，这部分与c中的格式化输出类似,\n\n```go\nvar x uint8 = 1<<1 | 1<<5\n\nfmt.Printf(\"%08b\\n\", x) // \"00100010\", the set {1, 5}\n\no := 0666\nfmt.Printf(\"%d %[1]o %#[1]o\\n\", o) // \"438 666 0666\"\n\nx := int64(0xdeadbeef)\nfmt.Printf(\"%d %[1]x %#[1]x %#[1]X\\n\", x)\n// Output:\n// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF\n\nascii := 'a'\nunicode := '国'\nnewline := '\\n'\nfmt.Printf(\"%d %[1]c %[1]q\\n\", ascii)   // \"97 a 'a'\"\nfmt.Printf(\"%d %[1]c %[1]q\\n\", unicode) // \"22269 国 '国'\"\n```\n上面的例子中，一般情况下Printf格式化字符串包含多个`%`参数时将会包含对应相同数量的额外操作数，但是 `%` 之后的`[1]` 副词告诉`Printf`函数**再次使用第一个操作数**。\n- `%`后的`#`副词告诉`Printf`在用`%o`、`%x`或 `%X`输出时生成`0`、`0x`或`0X`前缀。\n- 字符使用`%c`参数打印，或者使用 `%q` 参数打印**带单引号的字符**\n\n内置的 `len` 函数返回一个有符号的`int`，可以像下面例子那样处理逆序循环。\n```go\nmedals := []string{\"gold\", \"silver\", \"bronze\"}\nfor i := len(medals) - 1; i >= 0; i-- {\n    fmt.Println(medals[i]) // \"bronze\", \"silver\", \"gold\"\n}\n```\n## 浮点数\nGo中的浮点型有 `float32` 和 `float64`\n\n其范围极限值可以在math包找到。\n- 常量 `math.MaxFloat32` 表示 `float32` 能表示的最大数值，大约是 `3.4e38`；对应的 `math.MaxFloat64` 常量大约是 `1.8e308`。它们分别能表示的最小值近似为 `1.4e-45` 和 `4.9e-324`。\n- 使用`Printf`函数的 `%g` 参数打印浮点数，将采用更紧凑的表示形式打印，并提供足够的精度，但是对应表格的数据，使用 `%e`（带指数）或 `%f` 的形式打印可能更合适。所有的这三个打印形式都可以指定**打印的宽度**和控制**打印精度**。\n```go\nfor x := 0; x < 8; x++ {\n    fmt.Printf(\"x = %d e^x = %8.3f\\n\", x, math.Exp(float64(x)))\n}\n// x = 0       e^x =    1.000\n// x = 1       e^x =    2.718\n// x = 2       e^x =    7.389\n// x = 3       e^x =   20.086\n// x = 4       e^x =   54.598\n// x = 5       e^x =  148.413\n// x = 6       e^x =  403.429\n// x = 7       e^x = 1096.633\n```\nmath包中除了提供大量常用的数学函数外，还提供了IEEE754浮点数标准中定义的特殊值的创建和测试：正无穷大和负无穷大`Inf -Inf`，分别用于表示太大溢出的数字和除零的结果；还有 `NaN` 非数，一般用于表示**无效的除法操作结果**，如0/0或Sqrt(-1)\n```go\nvar z float64\nfmt.Println(z, -z, 1/z, -1/z, z/z) // \"0 -0 +Inf -Inf NaN\"\n```\n\n- Go中的 `NaN` 与JS中类似，跟任何数都是不相等的，包括其自身，可以用`math.IsNaN` 用于测试一个数是否是非数 `NaN`\n```go\nnan := math.NaN()\nfmt.Println(nan == nan, nan < nan, nan > nan) // \"false false false\"\n```\n## 复数\nGo语言提供了两种精度的复数类型：`complex64`和`complex128`，分别对应`float32`和`float64`两种浮点数精度。内置的 `complex` 函数用于构建复数，内建的 `real` 和 `imag` 函数分别返回复数的**实部**和**虚部**\n```go\nvar x complex128 = complex(1, 2) // 1+2i\nvar y complex128 = complex(3, 4) // 3+4i\nfmt.Println(x*y)                 // \"(-5+10i)\"\nfmt.Println(real(x*y))           // \"-5\"\nfmt.Println(imag(x*y))           // \"10\"\n```\n\n如果一个浮点数面值或一个十进制整数面值后面跟着一个i，例如`3.141592i`或`2i`，它将构成一个复数的**虚部**，复数的**实部是0**：\n\n```go\nfmt.Println(1i * 1i) // \"(-1+0i)\", i^2 = -1\n```\n一个复数常量可以正常加到另一个普通数值常量\n```go\nfmt.Println(1i * 1i) // \"(-1+0i)\", i^2 = -1\n```\n\nmath/cmplx包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。\n\n```go\nfmt.Println(cmplx.Sqrt(-1)) // \"(0+1i)\"\n```\n\n## 布尔型\n`true` or `false`，这一点没什么好说的。\n## 字符串\nGo中的字符串类型`string`是 **不可变字符串**，与JS一样，与c++不同。\n> 不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。同样，一个字符串s和对应的子字符串切片s[7:]的操作也可以安全地共享相同的内存，因此字符串切片操作代价也是低廉的。在这两种情况下都没有必要分配新的内存。\n\n字符串中的第 `i` 个字节并不一定是字符串的第 `i` 个字符，因为对于非ASCII字符的UTF8编码会要两个或多个字节。\n\n`s[i:j]` 基于原始的 `s` 字符串的第 `i` 个字节开始到第 `j` 个字节（**不包含 `j` 本身**）生成一个新字符串。生成的新字符串将包含 `j-i` 个字节。\n- `i` 和 `j` 都可以被忽略，当它们被忽略时将采用`0`作为开始位置，采用`len(s)`作为结束的位置。\n\n```go\nfmt.Println(s[0:5]) // \"hello\"\nfmt.Println(s[:5]) // \"hello\"\nfmt.Println(s[7:]) // \"world\"\nfmt.Println(s[:])  // \"hello, world\"\n```\n\n`+` 操作符将两个字符串连接构造一个新字符串：\n\n```go\nfmt.Println(\"goodbye\" + s[5:]) // \"goodbye, world\"\n```\n\n字符串的比较是通过逐个字节比较完成的，比较结果是字符串自然编码的顺序。\n\nGo语言源文件总是用UTF8编码，并且Go语言的文本字符串也以UTF8编码的方式处理，因此我们可以将Unicode码点也写到字符串面值中。\n\n一个**原生的字符串面值**形式如下，使用反引号代替双引号。\n\n```go\nconst GoUsage = `Go is a tool for managing Go source code.\nUsage:\n    go command [arguments]\n...`\n```\n\n在原生的字符串面值中，**没有转义操作**；全部的内容都是字面的意思，包含退格和换行，因此一个程序中的原生字符串面值可能跨越多行\n- 在原生字符串面值内部是无法直接写·反引号的，可以用八进制或十六进制转义或+\"`\"连接字符串常量完成）。\n- 唯一的特殊处理是会**删除回车**以保证在所有平台上的值都是一样的，包括那些把回车也放入文本文件的系统\n> Windows系统会把回车和换行一起放入文本文件中\n\n以下是一些字符串方法\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\ta := \"hello\"\n\tfmt.Println(strings.Contains(a, \"ll\"))                // true\n\tfmt.Println(strings.Count(a, \"l\"))                    // 2\n\tfmt.Println(strings.HasPrefix(a, \"he\"))               // true\n\tfmt.Println(strings.HasSuffix(a, \"llo\"))              // true\n\tfmt.Println(strings.Index(a, \"ll\"))                   // 2\n\tfmt.Println(strings.Join([]string{\"he\", \"llo\"}, \"-\")) // he-llo\n\tfmt.Println(strings.Repeat(a, 2))                     // hellohello\n\tfmt.Println(strings.Replace(a, \"e\", \"E\", -1))         // hEllo\n\tfmt.Println(strings.Split(\"a-b-c\", \"-\"))              // [a b c]\n\tfmt.Println(strings.ToLower(a))                       // hello\n\tfmt.Println(strings.ToUpper(a))                       // HELLO\n\tfmt.Println(len(a))                                   // 5\n\tb := \"你好\"\n\tfmt.Println(len(b)) // 6\n}\n```\n> 在go语言里面的话，可以很轻松地用 `%v` 来打印**任意类型的变量**，而不需要区分数字字符串,也可以用 `%+v` 打印详细结果，`%#v` 则更详细。\n```go\npackage main\n\nimport \"fmt\"\n\ntype point struct {\n\tx, y int\n}\n\nfunc main() {\n\ts := \"hello\"\n\tn := 123\n\tp := point{1, 2}\n\tfmt.Println(s, n) // hello 123\n\tfmt.Println(p)    // {1 2}\n\n\tfmt.Printf(\"s=%v\\n\", s)  // s=hello\n\tfmt.Printf(\"n=%v\\n\", n)  // n=123\n\tfmt.Printf(\"p=%v\\n\", p)  // p={1 2}\n\tfmt.Printf(\"p=%+v\\n\", p) // p={x:1 y:2}\n\tfmt.Printf(\"p=%#v\\n\", p) // p=main.point{x:1, y:2}\n\n\tf := 3.141592653\n\tfmt.Println(f)          // 3.141592653\n\tfmt.Printf(\"%.2f\\n\", f) // 3.14\n}\n```\n\n### 字符串和数字转换\ngo 语言当中，关于字符串和数字类型之间的转换都在 `strconv` 这个包下，这个包是 string convert 这两个单词的缩写。可以用 `ParseInt` 或者 `ParseFloat` 来解析一个字符串。也可以用 Atoi 把一个十进制字符串转成数字。可以用 `Itoa` 把数字转成字符串。\n- 如果输入不合法，那么这些函数都会返回error **除了Itoa**\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tf, _ := strconv.ParseFloat(\"1.234\", 64)\n\tfmt.Println(f) // 1.234\n\n\tn, _ := strconv.ParseInt(\"111\", 10, 64)\n\tfmt.Println(n) // 111\n\n\tn, _ = strconv.ParseInt(\"0x1000\", 0, 64)\n\tfmt.Println(n) // 4096\n\n\tn2, _ := strconv.Atoi(\"123\")\n\tfmt.Println(n2) // 123\n\n\tn2, err := strconv.Atoi(\"AAA\")\n\tfmt.Println(n2, err) // 0 strconv.Atoi: parsing \"AAA\": invalid syntax\n\n\tn3 := strconv.Itoa(123) // 这个不返回error\n\tfmt.Println(n3) // 123\n}\n```\n\n## 常量\n同其他语言的常量一样，常量的值不可修改，且必须被初始化，若批量声明常量时其除第一个其他的初始化表达式可被省略，若省略则使用前面的常量表初始化表达式，如下：\n```go\nconst pi = 3.14159 // approximately; math.Pi is a better approximation\nconst (\n    e  = 2.71828182845904523536028747135266249775724709369995957496696763\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459\n)\nconst (\n    a = 1\n    b\n    c = 2\n    d\n)\n```\n### `iota` 常量生成器\n> 类似 c/c++ 中的枚举类型 `Enum`!!\n\n常量声明可以使用`iota`常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式。在一个 `const` 声明语句中，在第一个声明的常量所在的行，`iota` 将会被置为 `0`，然后在每一个有常量声明的行加一。\n```go\ntype Weekday int\nconst (\n    Sunday Weekday = iota\n    Monday\n    Tuesday\n    Wednesday\n    Thursday\n    Friday\n    Saturday\n)\n// Sunday 对应 0 \n// Monday 对应 1 \n// ....\n// Saturday 对应 6\n```\n\n也可以结合复杂的表达式使用 `itoa`，如下例：每个常量对应表达式`1 << iota`，是**连续的2的幂**\n\n```go\ntype Flags uint\n\nconst (\n    FlagUp Flags = 1 << iota // is up\n    FlagBroadcast            // supports broadcast access capability\n    FlagLoopback             // is a loopback interface\n    FlagPointToPoint         // belongs to a point-to-point link\n    FlagMulticast            // supports multicast access capability\n)\n\nfmt.Println(FlagUp, FlagBroadcast, FlagLoopback, FlagPointToPoint, FlagMulticast)\n// 1 2 4 8 16\n```\n### 无类型常量\n许多常量并没有一个明确的基础类型。Go的编译器为这些没有明确基础类型的数字常量提供比基础类型更高精度的算术运算；你可以认为 **至少有256bit的运算精度** 。这里有六种未明确类型的常量类型，分别是无类型的布尔型、无类型的整数、无类型的字符、无类型的浮点数、无类型的复数、无类型的字符串。\n\n只有常量可以是无类型的。当一个无类型的常量被赋值给一个变量的时候，无类型的常量将会被**隐式转换**为对应的类型，如果转换合法的话。\n- 对于**没有显式类型的变量声明**（包括简短变量声明），常量的形式将**隐式决定**变量的默认类型，\n    - 无类型整数常量转换为 `int`，它的**内存大小是不确定**的，无类型浮点数和复数常量则转换为**内存大小明确**的 `float64` 和 `complex128`。\n\n# 程序结构\nhttps://books.studygolang.com/gopl-zh/ch2/ch2.html\n\n## 声明与变量\n\n### var\n一般语法如下\n\n```go\nvar 变量名 类型 = 表达式\n```\n类型省略则根据表达式自动推导，如果表达式为空，则用 **零值** 初始化该变量（因此在Go语言中**不存在未初始化的变量**）\n\n| 类型 | 零值 |\n| ---- | ---- |\n| 数值 | `0` | \n| 布尔 | `false` | \n| 字符串 | \"\" |\n| 数组或结构体等聚合类型 | `nil` |  \n\n可以在一个声明语句中同时声明一组变量，或用一组初始化表达式声明并初始化一组变量。\n\n```go\nvar i, j, k int     // int int int\nvar b, f, s = true, 2.3, \"hello\" // bool float64 string\n```\n\n一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化：\n\n```go\nvar f, err = os.Open(name) // os.Open returns a file and an error\n```\n### 简短变量声明 `:=`\n\n以`名字 := 表达式`的形式声明变量，变量的类型根据表达式来自动推导\n- 因为其简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。\n- 而var形式的声明语句往往是用于需要显式指定变量类型的地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。\n\n```go\ni := 100                  // int\ni, j := 0, 1              // int int\nvar boiling float64 = 100 // a float64\nvar names []string\nvar err error\n```\n\n- 简短变量声明语句对在同级词法域已经声明过的变量只会进行赋值行为\n- 如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量\n\n### 指针\n与c语言中类似，通过 `&`操作符取址，通过 `*` 取值\n```go\nx := 1\np := &x         // p, of type *int, points to x\nfmt.Println(*p) // \"1\"\n*p = 2          // equivalent to x = 2\nfmt.Println(x)  // \"2\"\n```\n任何类型的指针的零值都是 `nil`。\n- 若`p`指向某个有效变量，那么 `p != nil` 测试为真。\n- 当两指针指向同一个变量或全部是 `nil` 时才相等。\n\n### `new` 函数\n`new(T)` 将创建一个 `T` 类型的匿名变量，初始化为 `T类型的零值`，然后返回变量地址，返回的指针类型为 `*T`。\n- Go 语言中的`new`是个预定义的**函数**，不是关键字！所以可以重新定义。\n```go\np := new(int)   // p, *int 类型, 指向匿名的 int 变量\nfmt.Println(*p) // \"0\"\n*p = 2          // 设置 int 匿名变量的值为 2\nfmt.Println(*p) // \"2\"\n```\n## 自增/自减运算\n自增语句`i++`给`i`加1；这和`i += 1`以及`i = i + 1`都是等价的。对应的还有`i--`给`i`减1。它们是**语句**，而不像C系的其它语言那样是表达式。\n\n- 所以`j = i++` **非法**，而且++和--都只能放在变量名后面，因此`--i`也非法。\n\n## 类型 `type`\n类似于c++中的typeof的加强版，形式如下\n```go\ntype 类型名 底层类型\n```\n如下，声明了两种类型：`Celsius` 和 `Fahrenheit` 分别对应不同的温度单位。\n- 底层数据类型决定其内部结构和表达方式\n- 它们虽然有着相同的底层类型 `float64`，但是它们是不同的数据类型，因此它们**不可以被相互比较或混在一个表达式运算。**\n- 类型转换不会改变值本身，但是会使它们的语义发生变化。\n```go\nimport \"fmt\"\n\ntype Celsius float64    // 摄氏温度\ntype Fahrenheit float64 // 华氏温度\n\nconst (\n    AbsoluteZeroC Celsius = -273.15 // 绝对零度\n    FreezingC     Celsius = 0       // 结冰点温度\n    BoilingC      Celsius = 100     // 沸水温度\n)\n\nfunc CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }\n\nfunc FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }\n```\n\n比较运算符==和<也可以用来比较一个命名类型的变量和另一个有相同类型的变量，或有着相同底层类型的未命名类型的值之间做比较。但是如果两个值有着不同的类型，则不能直接进行比较：\n\n```go\nvar c Celsius\nvar f Fahrenheit\nfmt.Println(c == 0)          // \"true\"\nfmt.Println(f >= 0)          // \"true\"\nfmt.Println(c == f)          // compile error: type mismatch\nfmt.Println(c == Celsius(f)) // \"true\"! 类型转换操作不会改变值\n```\n\n命名类型还可以为该类型的值定义新的行为。这些行为表示为一组关联到该类型的函数集合，我们称为**类型的方法集** (在第六章会详细讲)\n\n下面的声明语句，Celsius类型的参数c出现在了函数名的前面，表示声明的是Celsius类型的一个名叫String的方法，该方法返回该类型对象c带着°C温度单位的字符串：\n\n```go\nfunc (c Celsius) String() string { return fmt.Sprintf(\"%g°C\", c) }\n```\n\n许多类型都会定义一个String方法，因为当使用fmt包的打印方法时，将会优先使用该类型对应的String方法返回的结果打印\n\n```go\nc := FToC(212.0)\nfmt.Println(c.String()) // \"100°C\"\nfmt.Printf(\"%v\\n\", c)   // \"100°C\"; no need to call String explicitly\nfmt.Printf(\"%s\\n\", c)   // \"100°C\"\nfmt.Println(c)          // \"100°C\"\nfmt.Printf(\"%g\\n\", c)   // \"100\"; does not call String\nfmt.Println(float64(c)) // \"100\"; does not call String\n```\n## 循环 `for`\n[命令行参数 · Go语言圣经](https://books.studygolang.com/gopl-zh/ch1/ch1-02.html)\n\nGo中的循环没有while、do while等，只有一种 `for`循环\n写法如下：\n```\nfor initialization; condition; post {\n    // zero or more statements\n}\n```\n\nfor循环三个部分不需括号包围。**大括号强制要求**，左大括号必须和*post*语句在同一行。\n- `initialization` 语句是可选的，在**循环开始前执行**。`initalization` 如果存在，必须是一条*简单语句*（simple statement），即短变量声明、自增语句、赋值语句或函数调用。\n- `condition`是一个布尔表达式（boolean expression），其值在每次循环迭代开始时计算。如果为`true`则执行循环体语句。\n- `post`语句在每次循环体执行结束后执行，之后再次对`condition`求值。`condition`值为`false`时，循环结束。\n\nfor循环的这三个部分每个都可以省略，如果省略`initialization`和`post`，就是while循环，分号也可以省略，如果省略三个部分，则为永真循环，可通过 `break` 跳出：\n```go\ni := 1\nfor {\n        fmt.Println(\"loop\")\n        break\n}\nfor j := 7; j < 9; j++ {\n        fmt.Println(j)\n}\n\nfor n := 0; n < 5; n++ {\n        if n%2 == 0 {\n                continue\n        }\n        fmt.Println(n)\n}\nfor i <= 3 {\n        fmt.Println(i)\n        i = i + 1\n}\n```\n## 分支结构\n### if else\nGo中的 `if` 类似 python，没有括号，**但后面必须跟大括号**\n```go\nif 7%2 == 0 {\n        fmt.Println(\"7 is even\")\n} else {\n        fmt.Println(\"7 is odd\")\n}\n\nif 8%4 == 0 {\n        fmt.Println(\"8 is divisible by 4\")\n}\n\nif num := 9; num < 0 {\n        fmt.Println(num, \"is negative\")\n} else if num < 10 {\n        fmt.Println(num, \"has 1 digit\")\n} else {\n        fmt.Println(num, \"has multiple digits\")\n}\n```\n### switch\ngo语言里面的 `switch` 分支结构类似c++。但也有很多不同：\n- switch 后面的那个变量名，也不要括号\n- c++中的switch case 如果不加 `break` 的话会然后会继续往下跑完所有的 case， 在go语言里面的话是**不需要加 `break`** 的\n- go语言里面的 switch 功能更强大，可以使用**任意的变量类型**，甚至可以用来取代任意的 if else 语句。\n> 你可以在 switch 后面不加任何的变量，然后在 case 里面写条件分支。这样代码相比你用多个 if else 代码逻辑会更为清晰。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\ta := 2\n\tswitch a {\n\tcase 1:\n\t\tfmt.Println(\"one\")\n\tcase 2:\n\t\tfmt.Println(\"two\")\n\tcase 3:\n\t\tfmt.Println(\"three\")\n\tcase 4, 5:\n\t\tfmt.Println(\"four or five\")\n\tdefault:\n\t\tfmt.Println(\"other\")\n\t}\n\n\tt := time.Now()\n\tswitch {\n\tcase t.Hour() < 12:\n\t\tfmt.Println(\"It's before noon\")\n\tdefault:\n\t\tfmt.Println(\"It's after noon\")\n\t}\n}\n```\n\n# 进程信息\n在 go 里面，我们能够用 `os.argv`  来得到程序执行的时候的指定的命令行参数。比如我们编译的一个 二进制文件，`command`。 后面接 `abcd` 来启动，输出就是 `os.argv` 会是一个长度为 `5` 的 `slice` ,第一个成员代表二进制自身的名字。我们可以用 `so.getenv`来读取环境变量。`exec`\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\t// go run example/20-env/main.go a b c d\n\tfmt.Println(os.Args)           // [/var/folders/8p/n34xxfnx38dg8bv_x8l62t_m0000gn/T/go-build3406981276/b001/exe/main a b c d]\n\tfmt.Println(os.Getenv(\"PATH\")) // /usr/local/go/bin...\n\tfmt.Println(os.Setenv(\"AA\", \"BB\"))\n\n\tbuf, err := exec.Command(\"grep\", \"127.0.0.1\", \"/etc/hosts\").CombinedOutput()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(buf)) // 127.0.0.1       localhost\n}\n```\n# 复合数据类型\n## 数组\n数组是一个由**固定长度**的**特定类型元素**组成的序列，一个数组可以由零个或多个元素组成。因为数组的长度是固定的，因此在Go语言中很少直接使用数组。和数组对应的类型是`Slice`（切片），它是可以增长和收缩的动态序列，slice功能也更灵活，但是要理解slice工作原理的话需要先理解数组。\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tvar a [5]int\n\ta[4] = 100\n\tfmt.Println(\"get:\", a[2])\n\tfmt.Println(\"len:\", len(a))\n\n\tb := [5]int{1, 2, 3, 4, 5}\n\tfmt.Println(b)\n\n\tvar twoD [2][3]int\n\tfor i := 0; i < 2; i++ {\n\t\tfor j := 0; j < 3; j++ {\n\t\t\ttwoD[i][j] = i + j\n\t\t}\n\t}\n\tfmt.Println(\"2d: \", twoD)\n}\n```\n\n## 切片 `Slice`\n切片不同于数组，可以任意更改长度，也有更多丰富的操作。\n- 用 `make` 来**创建一个切片**，可以像数组一样去取值\n- 使用 `append` 来追加元素。注意 append 的用法与js中的`concat`相似，返回一个新数组，把 append 的结果赋值为原数组。\n- slice 初始化的时候也可以动态的指定长度。 `len(s)`\n- slice 拥有像 python 一样的**切片操作**，比如`s[2:5]`代表取出第二个到第五个位置的元素，不包括第五个元素。**不过不同于python，这里不支持负数索引**\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ts := make([]string, 3)\n\ts[0] = \"a\"\n\ts[1] = \"b\"\n\ts[2] = \"c\"\n\tfmt.Println(\"get:\", s[2])   // c\n\tfmt.Println(\"len:\", len(s)) // 3\n\n\ts = append(s, \"d\")\n\ts = append(s, \"e\", \"f\")\n\tfmt.Println(s) // [a b c d e f]\n\n\tc := make([]string, len(s))\n\tcopy(c, s)\n\tfmt.Println(c) // [a b c d e f]\n\n\tfmt.Println(s[2:5]) // [c d e]\n\tfmt.Println(s[:5])  // [a b c d e]\n\tfmt.Println(s[2:])  // [c d e f]\n\n\tgood := []string{\"g\", \"o\", \"o\", \"d\"}\n\tfmt.Println(good) // [g o o d]\n}\n```\n## Map\n`map` 是实际使用过程中最频繁用到的数据结构。\n- 可以用 `make` 来创建一个空 `map` ，这里会需要两个类型，`key` 和 `value` 的类型 \n    - `map[string]int` 表示 `key` 类型为`string` 、`value` 类型为 `int`\n- `map` 的取值与插入类似c++中STL的map，可直接进行。 `m[key]` `m[key] = value`\n- 可以用 `delete` 从里面**删除键值对**\n- Go 中的`map`是**完全无序**的，遍历的时候不会按照字母顺序，也不会按照插入顺序输出，而是**随机顺序**\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tm := make(map[string]int)\n\tm[\"one\"] = 1\n\tm[\"two\"] = 2\n\tfmt.Println(m)           // map[one:1 two:2]\n\tfmt.Println(len(m))      // 2\n\tfmt.Println(m[\"one\"])    // 1\n\tfmt.Println(m[\"unknow\"]) // 0\n\n\tr, ok := m[\"unknow\"]\n\tfmt.Println(r, ok) // 0 false\n\n\tdelete(m, \"one\")\n\n\tm2 := map[string]int{\"one\": 1, \"two\": 2}\n\tvar m3 = map[string]int{\"one\": 1, \"two\": 2}\n\tfmt.Println(m2, m3)\n}\n```\n## range\n对于一个 `slice` 或者一个 `map` 的话，我们可以用 `range` 来快速遍历，这样代码能够更加简洁。 range 遍历的时候，对于**数组**会返回两个值，第一个是索引，第二个是对应位置的值。如果我们不需要索引的话，我们可以用下划线 `_` 来忽略。\n> Go语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。用`空标识符`（blank identifier），即`_`（也就是下划线）。空标识符可用于在任何**语法需要变量名但程序逻辑不需要**的时候（如：在循环里）丢弃不需要的循环索引，并保留元素值。\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnums := []int{2, 3, 4}\n\tsum := 0\n\tfor i, num := range nums {\n\t\tsum += num\n\t\tif num == 2 {\n\t\t\tfmt.Println(\"index:\", i, \"num:\", num) // index: 0 num: 2\n\t\t}\n\t}\n\tfmt.Println(sum) // 9\n\n\tm := map[string]string{\"a\": \"A\", \"b\": \"B\"}\n\tfor k, v := range m {\n\t\tfmt.Println(k, v) // b 8; a A\n\t}\n\tfor k := range m {\n\t\tfmt.Println(\"key: \", k) // key:  a; key:  b\n\t}\n\tfor _, v := range m {\n\t\tfmt.Println(\"value:\", v) // value: A; value: B\n\t}\n}\n```\n## 结构体\n结构体的话是带类型的字段的集合。比如这里 `user` 结构包含了两个字段，`name` 和 `password`\n- 可以用结构体的名称去初始化一个结构体变量，构造的时候需要**传入每个字段的初始值**\n- 也可以用键值对的方式指定初始值，这样可以只对一部分字段进行初始化\n- 同样的结构体也支持指针，这样能够实现直接对于结构体的修改，可以在某些情况下**避免**一些大结构体的**拷贝开销**\n```go\npackage main\n\nimport \"fmt\"\n\ntype user struct {\n\tname     string\n\tpassword string\n}\n\nfunc main() {\n\ta := user{name: \"wang\", password: \"1024\"}\n\tb := user{\"wang\", \"1024\"}\n\tc := user{name: \"wang\"}\n\tc.password = \"1024\"\n\tvar d user\n\td.name = \"wang\"\n\td.password = \"1024\"\n\n\tfmt.Println(a, b, c, d)                 // {wang 1024} {wang 1024} {wang 1024} {wang 1024}\n\tfmt.Println(checkPassword(a, \"haha\"))   // false\n\tfmt.Println(checkPassword2(&a, \"haha\")) // false\n}\n\nfunc checkPassword(u user, password string) bool {\n\treturn u.password == password\n}\n\nfunc checkPassword2(u *user, password string) bool {\n\treturn u.password == password\n}\n```\n## JSON\ngo语言中的 JSON 操作非常简单\n- 对于一个已有的结构体，只要保证**每个字段的第一个字母是大写**，也就是是**公开字段**。那么这个结构体就能用 `JSON.marshaler` 去序列化，变成一个 JSON 的字符串。\n>  `JSON.marshaler` 返回序列化值和error，如下例 \\\n> 这样默认序列化出来的字符串，是大写字母开头。可以在后面用 json tag 等语法来去修改输出 JSON 结果里面的字段名。\n- 序列化之后的字符串可以用 `JSON.unmarshaler` 去**反序列化**到一个空的变量里面。\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\ntype userInfo struct {\n\tName  string\n\tAge   int `json:\"age\"`\n\tHobby []string\n}\n\nfunc main() {\n\ta := userInfo{Name: \"wang\", Age: 18, Hobby: []string{\"Golang\", \"TypeScript\"}}\n\tbuf, err := json.Marshal(a)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(buf)         // [123 34 78 97...]\n\tfmt.Println(string(buf)) // {\"Name\":\"wang\",\"age\":18,\"Hobby\":[\"Golang\",\"TypeScript\"]}\n\n\tbuf, err = json.MarshalIndent(a, \"\", \"\\t\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(buf))\n\n\tvar b userInfo\n\terr = json.Unmarshal(buf, &b)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%#v\\n\", b) // main.userInfo{Name:\"wang\", Age:18, Hobby:[]string{\"Golang\", \"TypeScript\"}}\n}\n```\n## 时间处理\ngo语言最常用的就是 `time.now()` 来获取当前时间，然后你也可以用 `time.date` 去构造一个**带时区的时间**，有很多方法来获取这个时间点的年月日小时分钟秒，\n- 可以用 `Sub`方法对两个时间进行减法，得到一个时间段。\n- 时间段又可以得到它有多少小时，多少分钟、多少秒。\n- 在和某些系统交互的时候，我们经常会用到时间戳。那可以用 `.UNIX` 来获取时间戳。`time.format`  `time.parse`\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tnow := time.Now()\n\tfmt.Println(now) // 2022-05-07 13:12:03.7190528 +0800 CST m=+0.004990401\n\tt := time.Date(2022, 5, 7, 13, 25, 36, 0, time.UTC)\n\tt2 := time.Date(2022, 8, 12, 12, 30, 36, 0, time.UTC)\n\tfmt.Println(t)                                                  // 2022-05-07 13:25:36 +0000 UTC\n\tfmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute()) // 2022 March 27 1 25\n\tfmt.Println(t.Format(\"2006-01-02 15:04:05\"))                    // 2022-05-07 13:25:36\n\tdiff := t2.Sub(t)\n\tfmt.Println(diff)                           // 2327h5m0s\n\tfmt.Println(diff.Minutes(), diff.Seconds()) // 139625 8.3775e+06\n\tt3, err := time.Parse(\"2006-01-02 15:04:05\", \"2022-05-07 13:25:36\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(t3 == t)    // true\n\tfmt.Println(now.Unix()) // 1651900531\n}\n\n```\n\n# 函数\nGo和其他很多语言不一样的是，函数参数变量类型是**后置的**。Go 中的函数**原生支持返回多个值**。\n- 在实际的业务逻辑代码里面几乎所有的函数都返回两个值，第一个是返回值，第二个值是一个**错误信息**。 如下例中的 `exists`\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add(a int, b int) int {\n\treturn a + b\n}\n\nfunc add2(a, b int) int {\n\treturn a + b\n}\n\nfunc exists(m map[string]string, k string) (v string, ok bool) {\n\tv, ok = m[k]\n\treturn v, ok\n}\n\nfunc main() {\n\tres := add(1, 2)\n\tfmt.Println(res) // 3\n\n\tv, ok := exists(map[string]string{\"a\": \"A\"}, \"a\")\n\tfmt.Println(v, ok) // A True\n}\n```\n## 错误处理\ngo 中的错误处理就是**使用一个单独的返回值**来传递错误信息\n- 在函数返回值类型后面加一个 `error`， 代表这个函数可能会返回错误。那么在函数实现的时候， `return` 需要同时 `return` 两个值\n- 出现错误时，可以 `return nil` 和一个 `error`。如果没有的话，那么返回原本的结果和 `nil`。\n```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\ntype user struct {\n\tname     string\n\tpassword string\n}\n\nfunc findUser(users []user, name string) (v *user, err error) {\n\tfor _, u := range users {\n\t\tif u.name == name {\n\t\t\treturn &u, nil\n\t\t}\n\t}\n\treturn nil, errors.New(\"not found\")\n}\n\nfunc main() {\n\tu, err := findUser([]user{{\"wang\", \"1024\"}}, \"wang\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(u.name) // wang\n\n\tif u, err := findUser([]user{{\"wang\", \"1024\"}}, \"li\"); err != nil {\n\t\tfmt.Println(err) // not found\n\t\treturn\n\t} else {\n\t\tfmt.Println(u.name)\n\t}\n}\n```\n# 工具推荐\n在课堂中提到的几个代码生成工具\n- [Convert curl commands to code (curlconverter.com)](https://curlconverter.com/#go)\n- [JSON转Golang Struct - 在线工具 - OKTools](https://oktools.net/json2go)\n\n# 课后练习\n1. 修改第一个例子猜谜游戏里面的最终代码，使用fmt.Scanf来简化代码实现\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc main() {\n\tmaxNum := 100\n\trand.Seed(time.Now().UnixNano())\n\tsecretNumber := rand.Intn(maxNum)\n\t// fmt.Println(\"The secret number is \", secretNumber)\n\n\tfmt.Println(\"Please input your guess\")\n\t//reader := bufio.NewReader(os.Stdin)\n\tfor {\n\t\t//input, err := reader.ReadString('\\n')\n\t\tvar guess int\n\t\t_, err := fmt.Scanf(\"%d\", &guess)\n\t\tfmt.Scanf(\"%*c\")    // 吃回车\n\t\tif err != nil {\n\t\t\tfmt.Println(\"An error occured while reading input. Please try again\", err)\n\t\t\tcontinue\n\t\t}\n\t\t//input = strings.TrimSuffix(input, \"\\n\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Invalid input. Please enter an integer value\")\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(\"You guess is\", guess)\n\t\tif guess > secretNumber {\n\t\t\tfmt.Println(\"Your guess is bigger than the secret number. Please try again\")\n\t\t} else if guess < secretNumber {\n\t\t\tfmt.Println(\"Your guess is smaller than the secret number. Please try again\")\n\t\t} else {\n\t\t\tfmt.Println(\"Correct, you Legend!\")\n\t\t\tbreak\n\t\t}\n\t}\n}\n```\n2. 修改第二个例子命令行词典里面的最终代码，增加另一种翻译引擎的支持\n\n```go\n\n```\n3. 在上一步骤的基础上，修改代码实现并行请求两个翻译引擎来提高响应速度\n\n\n\n# 总结及心得\n课上很详细的讲了Go的基本语法，以及再加上自己阅读Go语言圣经的一些总结，得出了这一篇文章，感觉跟JS和c/c++还是有很多共通之处的。\n\n> 内容来源于：[Go语言圣经](https://books.studygolang.com/gopl-zh/ch2/ch2.html) 以及 第三届青训营课程","sources":["xlog"],"summary":"字节第三届青训营是后端专场，开课了，高高兴兴写笔记啦 课上很详细的讲了Go的基本语法，以及再加上自己阅读Go语言圣经的一些总结，得出了这一篇文章，感觉跟JS和c/c++还是有很多共通之处的。\n\n内容来源于：Go语言圣经 以及 第三届青训营课程\n 课程源码 wangkechun/go…","attributes":[{"value":"go_learning_1md","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/go_learning_1md"],"date_published":"2022-05-07T13:35:01.000Z"}}}