{"characterId":52270,"noteId":50,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreifnkaihht42w5rbeea2dc5qrtrrctfbkz5lw72lbo7gt52ltaq7pu","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:39:04.000Z","updatedAt":"2023-04-05T11:27:58.000Z","deletedAt":null,"publishedAt":"2022-01-27T14:30:17.000Z","transactionHash":"0xdc576b85b753d220cd2851aa2bc5e951b6f739ada0a82dfd613ec82afbd0296e","blockNumber":30317649,"logIndex":16,"updatedTransactionHash":"0x6acc333da5634a99fd5f358a7c13180690937343932209b4741b26c0ceb65851","updatedBlockNumber":30334983,"updatedLogIndex":0,"metadata":{"uri":"ipfs://bafkreifnkaihht42w5rbeea2dc5qrtrrctfbkz5lw72lbo7gt52ltaq7pu","type":"NOTE","content":{"tags":["post","前端","JavaScript","Webpack","青训营"],"type":"note","title":"青训营 |「构建Webpack知识体系」","content":"---\ntitle: 青训营 |「构建Webpack知识体系」\nlink: note/front-end/bytedance-note/webpack-knowledge-system\ncatalog: true\ndate: 2022-01-27 14:30:17\nsubtitle: 这节课详细讲了Webpack的Webpack的作用、配置结构及其关键配置项，还讲了Loader中的链式调用、插件的实现原理与一些其他特性等，可以看出老师对Webpack的研究非常详细透彻，课上都是直接进行调试进入loader内部等帮助我们理解。\nlang: cn\ntags:\n- 前端\n- JavaScript\n- Webpack\ncategories:\n- [笔记, 青训营笔记]\n---\n# 本节课重点内容\n\n- 理解前端\"工程化\"概念、工具、目标\n- 一个团队总要有那么几个人熟悉Webpack, 某种程度上可以成为个人的核心竞争力\n- **高阶前端必经之路**\n\n课程目标：\n\n- 理解Webpack的基本用法\n- 通过介绍Webpack功能、Loader 与Plugin组件设计，建立一个知识体系\n- 不会事无巨细，介绍Webpack所有\n- 也不是深入源码，讲解底层实现原理\n\n## 什么是Webpack\n\n前端项目由什么构成? —— **资源**\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/344365689d9447139272c56e5f449266~tplv-k3u1fbpfcp-watermark.image?)\n\n旧时代手动管理这些资源，但有以下几个对开发效率影响非常大的缺点：\n\n- 依赖手工，比如有50个JS文件……**操作过程繁琐**\n- 当代码文件之间有**依赖**的时候，就得**严格按依赖顺序**书写\n- 开发与生产环境一致，难以接入TS或JS新特性\n- 比较**难接入Less、Sass等工具**\n- JS、 图片、CSS资源管理模型不一致\n\n后来，出现了很多前端工程化工具，特别是Webpack\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57b71acd81ee4932ac44cace3f6c94a5~tplv-k3u1fbpfcp-watermark.image?)\n\nWeb本质上是一种前端资源**编译**、**打包**工具\n\n- 多份资源文件打包成一个Bundle\n- 支持\n  - Babel、Eslint、 TS、 CoffeScript、Less、 Sass\n- 支持模块化处理css、图片等资源文件\n- 支持 HMR + 开发服务器\n- 支持**持续监听**、**持续构建**\n- 支持**代码分离**\n- 支持 Tree-shaking\n- 支持 Sourcemap\n- ...\n\n## Webpack打包核心流程\n\n### 示例\n\n1. 安装（注意用管理员权限打开命令行）\n\n   ```\n   npm i -D webpack webpack-cli\n   ```\n\n   ![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e51b8a1d34ef475b80cc4d6306ad835c~tplv-k3u1fbpfcp-watermark.image?)\n\n2. 编辑配置文件webpack.config.js \n\n   ```\n   module.exports = {\n       entry: 'main.js',   // 定义当前项目的入口文件\n       output: {   // 定义当前项目的输出文件\n           filename: \"[name].js\",\n           path: path.join(__dirname, \"./dist\"),\n       },\n       module: {// 定义一些loader相关的内容，可在下文看到\n           rules: [{\n               test: /\\.less$/i,\n               use: ['style-loader', 'css-loader', 'less-loader']\n           }]\n       }\n   }\n   ```\n\n3. 执行编译命令\n\n   ```js\n   npx webpack\n   ```\n\n   \n\n### 步骤\n\n**Entry => Dependencies Lookup => Transform => Bundle => Output**\n\n极度简化版：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a45521b552134b25aadb15c67b37604c~tplv-k3u1fbpfcp-watermark.image?)\n\n1. 从entry中的入口文件开始启动编译\n2. 依赖解析：根据`require` 或者 `import` 等语句找到以来资源\n3. 根据`module` 配置，调用资源转移器将非JS资源编译为JS内容，直至所有资源处理完毕\n4. 资源合并打包：将转译后的资源内容合并打包为可直接在浏览器运行的JS文件\n\n**模块化 + 一致性**\n\n- 多个文件资源合并成一个，减少http请求数\n- 支持模块化开发\n- 支持高级JS特性\n- 支持Typescript、 CoffeeScript 方言\n- 统一图片、CSS、字体等其它资源的处理模型\n- Etc...\n\n### 关键配置项（如何使用？）\n\n关于Webpack的使用方法，基本都围绕 **配置** 展开，而这些配置大致可划分为两类：\n\n- **流程类**：作用于流程中某个or若干个环节，**直接影响打包效果**的配置项\n- **工具类**：主流程之外，提供更多**工程化能力**的配置项\n\nps：官网文档确实，看不太懂（）\n\n配置总览：\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9b763cad5574ed682942cf0151072b3~tplv-k3u1fbpfcp-watermark.image?)\n\n按使用频率，主要有以下几大配置项\n\n- entry/output——程序输入输出，必需的\n\n- module/plugins\n\n  - 如图，比如我这个项目需要加载less文件，需要导入以下loader等\n\n    ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d690d2590a604b43b0cd5a1be79684e2~tplv-k3u1fbpfcp-watermark.image?)\n\n- mode\n\n- watch/devServer/devtool\n\n[Webpack配置官方文档](https://webpack.js.org/configuration/)\n\n### 使用Webpack处理CSS/less等\n\n1. 安装Loader\n\n   ```\n   npm add -D css- Loader style-loader\n   ```\n\n2. 添加module处理css文件\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d690d2590a604b43b0cd5a1be79684e2~tplv-k3u1fbpfcp-watermark.image?)\n\n#### 思考题\n\n- Loader有什么作用？为什么这里需要用到css-loader、style-loader\n- 与旧时代，在HTML文件中维护CSS 相比，这种方式会有什么优劣处?\n- 有没有接触过Less、Sass、 Stylus 这一类CSS预编译框架？如何在Webpack接入这些工具？\n  - 答：接触过less\n\n参考资料：\n\n- [Css-loader](https://github.com/webpack-contrib/css-loader)\n- [Webpack 原理系列七：如何编写loader](https://mp.weixin.qq.com/s/TPWcB4MfVrTgFtVxsShNFA)\n- [Style-loader](https://webpack.js.org/loaders/style-loader/)\n\n### 使用Webpack接入Babel\n\n1. 安装依赖\n\n   ```\n   npm -D @babel/core @babel/preset-env babel-loader\n   ```\n\n2. 声明入口 `entry `& 产物出口`output`\n\n3. 添加module处理css文件\n\n   ```js\n   module:{\n       rules:[\n       {\n           test:/\\.js?$/,\n           use:[{\n               loader: 'babel-loader',\n               options: {\n                   presets: [\n                       [\n                           '@babel/preset-env'\n                       ]\n                   ]\n               }\n           }]\n       }\n   ]\n   }\n   ```\n\n4. 执行 `npx webpack`\n\n#### 思考题\n\n- Babel具体有什么功能\n- Babel与Webpack分别解决了什么问题？为何两者能协作到一起了？\n\n参考资料：\n\n- [Babel-loader](https://webpack.js.org/loaders/babel-loader/)\n- [Babel官网](https://babeljs.io/)\n- [@babel/preset-env](https://babeljs.io/docs/en/babel-preset-env)\n- [@babel/preset-react](https://babeljs.io/docs/en/babel-preset-react)\n- [@babel/preset-typescript](https://babeljs.io/docs/en/babel-preset-typescript)\n\n### 使用Webpack生成html\n\n1. 安装依赖\n\n   ```\n   npm i -D html-webpack-plugin\n   ```\n\n2. 配置\n````\nconst path = require( ”path\");\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n   entry: \"./src/index\",\n   output: {\n       filename:“ [name]. js\",\n       path: path.join(__dirname, \"./dist\"),\n   },\n   plugins: [new HtmlWebpackPlugin()]\n};\n````\n\n3. 执行`npx webpack`\n\n#### 思考题\n\n- 相比于手工维护HTML内容，这种自动生成的方式有什么优缺点？\n\n参考资料：\n\n- [HtmlWebpackPlugin ](https://webpack.js.org/plugins/html-webpack-plugin/)\n\n### 使用Webpack——HMR\n\nHot Module Replacement——模块热替换（写的代码会被立刻更新到浏览器上~）\n\n1. 开启HMR\n\n   ```js\n   module.exports={\n   \t// ...\n   \tdevServer: {\n           hot:true; // 必需\n       }\n   };\n   ```\n\n2. 启动webpack\n\n原理可参考：[Webpack 原理系列十：HMR 原理全解析 (qq.com)](https://mp.weixin.qq.com/s/cbYMpuc4hnV9NA4VfqJLvg)\n\n### 使用Webpack——Tree-Shaking\n\nTree-Shaking -树摇，用于删除**Dead Code**\n\n**Dead Code** \n\n- 代码没有被用到，不可到达\n- 代码的执行结果不会被用到\n- 代码只读不写\n\nTree-Shaking\n\n- 模块导出了，但未被其他模块使用\n\n开启步骤？\n\n- mode: \"production\"\n- optimization: {usedExports: true}\n```\n  module.exports = {\n  \tentry: \"./src/ index\",\n  \tmode: \"production\",\n  \tdevtool: false,\n  \toptimization: {\n  \t\tusedExports: true, \n  \t},\n  };\n```\n\n  ps：对工具类库如Lodash有奇效，能**大大减小产物体积**\n\n### 其他工具\n\n- 缓存\n- Sourcemap （前面的课程中有提过）\n- 性能监控\n- 日志\n- 代码压缩\n- 分包\n- ...\n\n### 思考题\n\n- 除上面提到的内容，还有哪些配置可划分为“流程类” 配置？\n- 工具类配置具体有什么作用？包括 devtool/cache/stat 等\n\n## 理解Loader\n\nLoader核心功能：**将非JS资源转换为JS资源**\n\n1. 安装Loader\n\n   ```js\n   npm add -D css-loader style-loader less-loader\n   ```\n\n2. 添加module处理less文件\n\n```js\nmodule.exports = { \n    module: {\n        rules: [\n            {\n                test: /\\.less$/i,\n                use:[\n                    \"style-loader\",\n                    \"css-loader\",\n                    \"less-loader\"，\n                ],\n            },\n        ],\n    },\n};\n```\n\n### 认识Loader：链式调用\n\n- **less-loader**: 实现**less => css的转换**\n- **css-loader**: 实现**css => js的转换**，将CSS包装成类似module.exports = \"${css}\" 的内容，包装后的内容符合JavaScript 语法\n- **style-loader**：**将css模块包进require语句**，并在运行时调用**injectStyle**等函数将内容**注入到页面的style标签**\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0786afef4d7342b2b0b435b99ef3f803~tplv-k3u1fbpfcp-watermark.image?)\n\n### 认识Loader：其他特性\n\n**特点**\n\n- 链式执行\n- 支持异步执行\n- 分normal、pitch两种模式\n- 参考：[Webpack 原理系列七：如何编写loader (qq.com)](https://mp.weixin.qq.com/s/TPWcB4MfVrTgFtVxsShNFA)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fef30223a8864fb58bf070778e3524b5~tplv-k3u1fbpfcp-watermark.image?)\n\n```\nmodule.exports = function(source, sourceMap?, data?) {\n\t// source 为loader的输入\n\t//可能是文件内容，也可能是上一个loader处理结果\n\treturn source;\n};\n```\n\n### 常用Loader\n\n- 站在使用角度，建议掌握这些常见Loader的**功能、配置方法**\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/01ecc31afc78422592a443c3763a48aa~tplv-k3u1fbpfcp-watermark.image?)\n\n### 思考题\n\n- Loader输入是什么？要求的输出是什么？\n- Loader的链式调用是什么意思？如何串联多个Loader？\n- Loader中如何处理异步场景？要抛一个异常的话要怎么抛\n\n## 理解插件Plugin\n\n### 什么是插件\n\n- 很多知名工具，如:\n  -  VS Code、Web Storm、Chrome、Firefox\n  - Babel、Webpack、 Rollup、 Eslint\n  - Vue、Redux、 Quill、 Axios\n- 等等，都设计了所谓\"插件”架构，为什么?\n\n**插件可以提升整个应用的拓展性**\n\n假设一个应用没有任何插件，整一个就是特别复杂的过程，那么：\n\n- **新人**需要了解整个流程细节，**上手成本高**\n- 功能迭代成本高，**牵一发动全身**\n- **功能僵化**，作为开源项目而言缺乏成长性\n\n心智成本高 => 可维护性低 => 生命力弱\n插件架构精髓：**对扩展开放，对修改封闭**，其实就是**开闭原则**\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/729fd73d4e2d48cfa49ff74643a69430~tplv-k3u1fbpfcp-watermark.image?)\n\n甚至，Webpack本身的很多功能也是基于插件实现的\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38a9e6a208bc49cfbd3f3fd097d962a7~tplv-k3u1fbpfcp-watermark.image?)\n\n### 如何编写插件\n\n首先：插件围绕 **钩子** 展开\n\n```js\nclass SomePlugin {\n    apply(compile) {\n    \tcompiler.hooks.thisCompilation.tap('SomePlugin', (compilation) => {\n    \t})\n    }\n}\n```\n\n#### 钩子\n\n1. 时机：编译过程的特定节点，Webpack会以钩子形式**通知插件此刻正在发生什么事情**；\n\n2. 上下文：通过tapable提供的回调机制，以**参数方式传递上下文**信息;\n\n3. 交互：在上下文参数对象中附带了很多存在side effect的交互接口，插件可以通过这些接口改变\n\n   ![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1acd0b48add4b4d8bb32ce5342aa905~tplv-k3u1fbpfcp-watermark.image?)\n\n   时机：compier.hooks.compilation\n\n   参数：compilation等\n\n   交互：dependencyFactories.set\n\n#### 思考题\n\n- Loader与插件有什么区同点?\n- \"钩子“有什么作用?如何监听钩子函数?\n\n参考资料：\n\n- [一文吃透 Webpack 核心原理](https://mp.weixin.qq.com/s/SbJNbSVzSPSKBe2YStn2Zw)\n- [ Webpack 插件架构深度讲解](https://mp.weixin.qq.com/s/tXkGx6Ckt9ucT2o8tNM-8w)\n\n## 如何学习Webpack\n\n### 入门级：学会灵活应用\n\n- 理解打包流程\n- 熟练掌握常用配置项、Loader、 插件的使用方法，能够灵活搭建集成Vue、React、 Babel、 Eslint、 Less、 Sass、 图片处理等工具的Webpack环境\n- 掌握常见脚手架工具的用法，例如: Vue-cli、 create-react- app、@angular/cli\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e58e7df7056e41ba8eae0945a2bfedf4~tplv-k3u1fbpfcp-watermark.image?)\n\n### 进阶：学会扩展Webpack\n\n- 理解Loader、 Plugin机制，能够**自行开发Webpack组件**\n- 理解常见**性能优化**手段，并能用于解决实际问题\n- 理解**前端工程化概念**与**生态现状**\n\n### 大师：源码级理解Webpack打包编译原理\n\n- 阅读源码，理解Webpack编译、打包原理，甚至能够参与共建\n\n# 总结感想\n\n这节课详细讲了Webpack的Webpack的作用、配置结构及其关键配置项，还讲了Loader中的链式调用、插件的实现原理与一些其他特性等，可以看出老师对Webpack的研究非常详细透彻，课上都是直接进行调试进入loader内部等帮助我们理解。老师还总结了Webpack知识体系：[Webpack 5 知识体系 - GitMind](https://gitmind.cn/app/doc/fac1c196e29b8f9052239f16cff7d4c7)。\n\n## Q&A\n\nQ：面试要掌握到什么程度\n\nA：网上很多面试主要围绕三种主题\n\n- Loader有什么作用？怎么写loader？常用loader有哪些\n  - 常用loader：css-loader、style-loader、vue-loader、file-loader、eslint-loader、babel-loader等\n- 插件有什么用？怎么写插件？编译原理？\n- Bundle、chunk、module分别是什么含义？\n\n一些资源：[深入浅出 Webpack](https://webpack.wuhaolin.cn/)\n\n> 本文引用的大部分内容来自范文杰老师的课，欢迎关注老师的公众号：**Tecvan**\n\n","sources":["xlog"],"summary":"理解前端\"工程化\"概念、工具、目标 一个团队总要有那么几个人熟悉Webpack, 某种程度上可以成为个人的核心竞争力 高阶前端必经之路 课程目标：\n\n理解Webpack的基本用法 通过介绍Webpack功能、Loader 与Plugin组件设计，建立一个知识体系 不会事无巨…","attributes":[{"value":"webpack-knowledge-systemmd","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/webpack-knowledge-systemmd"],"date_published":"2022-01-27T14:30:17.000Z"}}}