{"characterId":52270,"noteId":47,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreib36fk24vu5uyc3azldxc4hsumsl7zlul5xswyhfsdcji64g32z5q","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:39:04.000Z","updatedAt":"2023-04-05T11:27:42.000Z","deletedAt":null,"publishedAt":"2022-01-28T14:30:17.000Z","transactionHash":"0xdc576b85b753d220cd2851aa2bc5e951b6f739ada0a82dfd613ec82afbd0296e","blockNumber":30317649,"logIndex":13,"updatedTransactionHash":"0x2c89a08e75d616af524f67cbf9ff5e586f9ee8a0075f605ed8c3b5d1749c291f","updatedBlockNumber":30334967,"updatedLogIndex":0,"metadata":{"uri":"ipfs://bafkreib36fk24vu5uyc3azldxc4hsumsl7zlul5xswyhfsdcji64g32z5q","type":"NOTE","content":{"tags":["post","前端","TypeScript","青训营"],"type":"note","title":"青训营 |「TypeScript入门」笔记","content":"---\ntitle: 青训营 |「TypeScript入门」笔记\nlink: note/front-end/bytedance-note/typescript-introduction\ncatalog: true\ndate: 2022-01-28 14:30:17\nsubtitle: 这节课老师讲了TypeScript的用处与基本语法、高级类型的应用、类型保护与类型守卫\n# sticky: true\nlang: cn\ntags:\n- 前端\n- TypeScript\ncategories:\n- [笔记, 青训营笔记]\n---\n\n这节课老师讲了TypeScript的用处与基本语法、高级类型的应用、类型保护与类型守卫\n\n# 什么是TypeScript\n\n## 发展历史\n\n- 2012-10：微软发布了TypeScript第一个版本(0.8)\n- 2014-10：Angular 发布了基于TypeScript的2.0版本\n- 2015-04：微软发布了Visual Studio Code\n- 2016-05：@ ty pes/react发布，TypeScript 可开发React \n- 2020-09：Vue 发布了3.0 版本，官方支持TypeScript \n- 2021-11：v4.5版本发布\n\n## 为什么是TypeScript\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab0c1101077f402f8afd8be753442b84~tplv-k3u1fbpfcp-watermark.image?)\n\n**动态类型**在**执行过程中**进行类型的匹配，js的弱类型会在执行时进行隐式类型转换，而在静态类型中则不然\n\nTypeScript则为**静态类型**：java、c/c++等\n\n- **可读性增强**：基于语法解析TSDoc，ide增强\n- 可维护性增强：**在编译阶段暴露大部分错误**\n- 多人合作的大型项目中，可以获得更好的稳定性和开发效率\n\nTypeScript是**JS的超集**\n\n- 包含于兼容所有Js特性， 支持**共存**\n- 支持**渐进式引入与升级**\n\n# 基本语法\n\n## 基本数据类型\n\njs ==> ts\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ae63f86172341e893293665ce701678~tplv-k3u1fbpfcp-watermark.image?)\n\n可以看到，ts的类型定义方式：`let 变量名: 类型 = 值;`\n\n[TypeScript基础类型](https://www.tslang.cn/docs/handbook/basic-types.html)\n\n## 对象类型\n\n[接口 · TypeScript中文网](https://www.tslang.cn/docs/handbook/interfaces.html)\n\n```ts\n// 创建一个对象，包括以下属性，类型为IBytedancer\n// I表示自定义的一个类型（一个命名约定），与类和对象进行区分\nconst bytedancer: IBytedancer = {\n    jobId: 9303245,\n    name: 'Lin',\n    sex: 'man',\n    age: 28,\n    hobby: 'swimming',\n}\n// 定义一个类型为IBytedancer\ninterface IBytedancer {\n\t/* 只读属性readonly:约束属性不可在对象初始化外赋值 */\n\treadonly jobId: number;\n    name: string;\n    sex: 'man' | 'woman' | 'other';\n    age: number;\n    /* 可选属性:定义该属性可以不存在 */\n    hobby?: string;\n    /* 任意属性:约束所有对象属性都必须是该属性的子类型 */\n    [key: string]: any; // any 任何类型\n}\n/* 报错:无法分配到\"jobId\"，因为它是只读属性 */\nbytedancer. jobId = 12345;\n/* 成功:任意属性标注下可以添加任意属性 */\nbytedancer .plateform = 'data';\n/* 报错:缺少属性\"name\", 而hobby可缺省 */\nconst bytedancer2: IBytedancer = {\n    jobId: 89757,\n    sex: \"woman\",\n    age: 18,\n}\n```\n\n## 函数类型\n\njs：\n\n```js\nfunction add(x, y!) {\n\treturn x + y;\n}\nconst mult = (x, y) =>  x * y;\n```\n\nts：[函数 · TypeScript中文网](https://www.tslang.cn/docs/handbook/functions.html)\n\n```ts\nfunction add(x: number, y: number): number {\n\treturn x + y;\n}\nconst mult: (x: number, y: number) => number = (x, y) => x * y;\n// 简化写法，定义接口IMult\ninterface IMult {\n\t(x: number, y: number): number ;\n}\nconst mult: IMult = (x, y) => x * y;\n```\n\n可以看到，格式为`function 函数名（参数:类型...）:返回值类型`\n\n## 函数重载\n\n```ts\n/* 对getDate函数进行重载，timestamp为可缺省参数 */\nfunction getDate(type: 'string', timestamp?: string): string;\nfunction getDate(type: 'date', timestamp?: string): Date;\nfunction getDate(type: 'string' | 'date', timestamp?: string): Date | string {\n    const date = new Date(timestamp);\n    return type === 'string' ? date.toLocaleString() : date;\n};\nconst x = getDate('date'); // x: Date\nconst y = getDate('string', '2018-01-10'); // y: string\n```\n\n简化形式如下：\n\n```ts\ninterface IGetDate {\n\t(type : 'string', timestamp ?: string): string; // 这个地方返回类型改为any就可以通过了\n\t(type : 'date', timestamp?: string): Date;\n\t(type: 'string' | 'date', timestamp?: string): Date | string;\n}\n/* 报错：不能将类型\"(type: any, timestamp: any) => string | Date\"分配给类型\"IGetDate\"。\n\t不能将类型\"string | Date\" 分配给类型\"string\"。\n\t不能将类型 \"Date\"分配给类型\"string\"。ts(2322) */\nconst getDate2: IGetDate = (type, timestamp) => {\n\tconst date = new Date( timestamp) ; \n\treturn type === 'string' ? date.toLocaleString() : date;\n}\n```\n\n## 数组类型\n\n**type**作用就是给类型起一个新名字，**相当于c++中的typedef**\n\n```ts\n/* 「类型+方括号」表示 */\ntype IArr1 = number[];\n/* 泛型表示 这两种最常用*/ \ntype IArr2 = Array<string | number| Record<string, number> > ;\n/* 元组表示 */\ntype IArr3 = [number, number, string, string];\n/* 接口表示 */\ninterface IArr4 {\n\t[key: number]: any;\n}\n\nconst arrl: IArr1 = [1, 2, 3, 4, 5, 6];\nconst arr2: IArr2 = [1, 2, '3', '4', { a: 1 }];\nconst arr3: IArr3 = [1, 2, '3', '4'];\nconst arr4: IArr4 = ['string', () => null, {}, []];\n```\n\n## TypeScript补充类型\n\n- **空类型**：表示**无赋值**\n- **任意类型**：是**所有类型的子类型**\n- **枚举类型**：支持枚举值到枚举名的**正、反向映射**\n\n```ts\n/* 空类型，表示无赋值 */\ntype IEmptyFunction = () => void;\n/* 任意类型，是所有类型的子类型 */\ntype IAnyType = any;\n/* 枚举类型:支持枚举值到枚举名的正、反向映射 */\nenum EnumExample {\n    add = '+',\n\tmult = '*',\n}\nEnumExample['add'] === '+';\nEnumExample['+'] === 'add';\nenum ECorlor { Mon, Tue, Wed, Thu, Fri, Sat, Sun };\nECorlor['Mon'] === 0;\nECorlor[0] === 'Mon' ;\n/*泛型*/\ntype INumArr = Array<number>;\n```\n\n## Typescript泛型\n\n**泛型**，之前学过c++的话dddd，跟c++中的差不多：**不预先指定具体的类型，而在使用的时候再指定类型**的一种特性\n\n```js\nfunction getRepeatArr(target) {\n\treturn new Array(100).fill(target); \n}\ntype IGetRepeatArr = (target: any) => any[];\n/* 不预先指定具体的类型，而在使用的时候再指定类型的一种特性 */\ntype IGetRepeatArrR = <T>(target: T) => T[];\n```\n\n泛型还可以使用在以下场景中：\n\n```ts\n/*泛型接口&多泛型*/\ninterface IX<T, U> {\n\tkey: T;\n\tval: U;\n}\n/* 泛型类 */\nclass IMan<T> {\n\tinstance: T;\n}\n/* 泛型别名 */\ntype ITypeArr<T> = Array<T>;\n```\n\n泛型还可以进行约束**范围**\n\n```ts\n/* 泛型约束:限制泛型必须符合字符串 */\ntype IGetRepeatStringArr = <T extends string>(target: T) => T[];\nconst getStrArr: IGetRepeatStringArr = target => new Array(100).fill(target);\n/* 报错:类型\"number\"的参数不能赋给类型“string\"的参数 */\ngetStrArr(123) ;\n\n/* 泛型参数默认类型 */\ntype IGetRepeatArr<T = number> = (target: T) => T[];// 与结构中的默认赋值有点类似\nconst getRepeatArr: IGetRepeatArr = target => new Array(100).fill(target);// 这里的IGetRepeatArr就是一个类型别名，此处没有传参数给这个类型别名\n/* 报错:类型\"string\"的参数不能赋给类型“numbe r\"的参数 */\ngetRepeatArr('123');\n```\n\n## 类型别名 & 类型断言\n\n> ### 类型断言\n>\n> 有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。\n>\n> 通过*类型断言* 这种方式可以**告诉编译器，“相信我，我知道自己在干什么”**。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。\n>\n> ```ts\n> let someValue: any = \"this is a string\";\n> \n> let strLength: number = (someValue as string).length;\n> ```\n>\n> [基础类型 · TypeScript中文网](https://www.tslang.cn/docs/handbook/basic-types.html)\n\n````js\n/*通过type关键字定义了IObjArr的别名类型*/\ntype IObjArr = Array<{\n\tkey: string;\n\t[objKey: string]: any;\n}>\nfunction keyBy<T extends IObjArr>(objArr: Array<T>) {\n\t/* 未指定类型时，result类型为{} */\n\tconst result = objArr.reduce((res, val, key) => {\n\t\tres[key] = val;\n\t\treturn res;\n\t}, {});\n    /* 通过as关键字，断言result类型为正确类型 */\n    return result as Record<string, T> ; \n}\n````\n\n上述代码，中有几个点需注意：\n\n> [reduce()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) 函数对数组中的每个元素执行一个由您提供的**reducer**函数(升序执行)，将其结果汇总为单个返回值。\n>\n> 语法：`arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])`\n\n## 字符串/数字 字面量\n\n```js\n/* 允许指定字符 串/数字必须的固定值*/\n/* IDomTag必须为html、body、div、 span中的其一*/\ntype IDomTag = 'html' | ' body' | 'div' | 'span';\n/* IOddNumber必须为1、 3、5、7、9中的其一 */\ntype IOddNumber = 1 | 3 | 5 | 7 | 9;\n```\n\n# 高级类型\n\n## 联合/交叉类型\n\n为书籍列表编写类型 -> ts类型声明繁琐存在较多重复。[高级类型](https://www.tslang.cn/docs/handbook/advanced-types.html)\n\n```ts\nconst bookList = [ {\t// 普通js\n\tauthor:'xiaoming',\n    type:'history',\n    range: '2001 -2021',\n}, {\n    author:'xiaoli',\n    type:'Story',\n    theme:'love',\n}] \n// ts 繁琐\ninterface IHistoryBook {\n    author:String;\n    type:String;\n    range:String\n}\ninterface IStoryBook { \n    author:String;\n    type:String;\n    theme:String;\n}\ntype IBookList = Array<IHistoryBook | IStoryBook>;\n```\n\n- 联合类型: **IA | IB;** 联合类型表示一个值可以是**几种类型之一**\n- 交叉类型: **IA & IB;** 多种类型**叠加**到一起成为一种类型，它包含了所需的所有类型的特性\n\n上述代码可以通过ts简化为：\n\n```ts\ntype IBookList = Array<{\n\tauthor: string;\n} & ({\n\ttype: 'history';\n\trange: string;\n} | {\n\ttype: 'story';\n\ttheme: string;\n})>; \n/* 限制了author只能为string类型，而type只能'history'/'story'二选一，并且type不同可能的属性不同 */\n```\n\n## 类型保护与类型守卫\n\n- 访问联合类型时，处于程序安全，**仅能访问联合类型中的交集部分**\n\n```ts\ninterface IA { a: 1, a1: 2 }\ninterface IB { b: 1, b1: 2 }\nfunction log(arg: IA | IB) {\n    /*报错:类型\"IA | IB\" 上不存在属性\"a”。 类型\"IB\"上不存在属性\"a\"\n    结论:访问联合类型时，处于程序安全，仅能访问联合类型中的交集部分*/\n\n\tif(arg.a) {\n        console.log(arg.a1);\n    } else {\n        console.log(arg.b1);\n    }\n}\n```\n\n上述报错可通过类型守卫解决：定义一个**函数**，其**返回值**是一个**类型谓词**，**生效范围为子作用域**\n\n```ts\ninterface IA { a: 1, a1: 2 }\ninterface IB { b: 1, b1: 2 }\n\n/*类型守卫:定义一个函数，。它的返回值是一个类型谓词，生效范围为子作用域 */\nfunction getIsIA(arg: IA | IB): arg is IA {\n    return !!(arg as IA).a;\n}\nfunction log2(arg: IA | IB) {\n    /* 不存在报错了 */\n\tif(getIsIA(arg) ) {\n        console.log(arg.a1);\n    } else {\n        console.log(arg.b1);\n    }\n}\n```\n\n或者typeof和instance判断\n\n```ts\n// 实现函数reverse 可将数组或字符串进行反转\nfunction reverse(target: string | Array<any>) {\n\t/* typof 类型保护*/\n    if (typeof target === 'string') {\n       return target.split('').reverse().join('');\n    }\n    /* instance 类型保护*/\n    if (target instanceof Object) {\n        return target.reverse() ;\n    }\n}\n```\n\n不会每次都这么麻烦吧，事实上，只有**当两个类型没有任何重合点的话**才需要类型守卫，如上述的书本例子，可以进行**自动类型推断。**\n\n```tsx\n// 实现函数logBook类型\n// 函数接受书本类型，并logger出相关特征\nfunction logBook(book: IBookItem) {\n\t// 联合类型+类型保护=自动类型推断\n\tif (book.type === 'history'){\n\t\tconsole.log(book.range)\n    } else{\n        console.log book.theme);\n    }\n}\n```\n\n再来看一个case，实现一个子集不污染的合并函数merge，将sourceObj合并到targetObj中，**sourceObj必须为targetObj的子集**\n\n```js\nfunction merge1(sourceObj, targetObj) {\t// js中，实现复杂，这样才能不污染\n    const result = { ...sourceObj };\n    for(let key in targetObj) {\n        const itemVal = sourceObj[key];\n        itemVal && ( result[key] = itemVal );\n    }\n    return result;\n}\nfunction merge2(sourceObj, targetObj) {// 若这两个入参的类型没问题，则可以这样\n    return { ...sourceObj, ...targetObj };\n}\n```\n\n而一种简单的思想就是在ts中编写两个类型，进行判断，但这样又会存在实现繁琐，增加target需要source联动去除，重复维护了两份x、y\n```ts\ninterface ISource0bj { \n    x?: string; \n    y?: string; \n}\ninterface ITarget0bf {\n    x: string;\n    y: string;\n}\ntype IMerge = (source0bj: ISource0bj, target0bj: ITarget0bj) => ITargetObj;\n/* 类型实现繁琐:若obj类型较为复杂，则声明source和target便需要大量重复2遍\n容易出错:若target增加/减少key,则需要source联动去除 */\n```\n\n通过泛型，改进，这里涉及到几个个知识点\n\n> - Partial：一个常见的任务是将一个已知的类型每个属性都变为可选的\n>\n> TypeScript提供了从旧类型中创建新类型的一种方式——**映射类型**。 在映射类型里，新类型以相同的形式去转换旧类型里每个属性。 （直接写就行，ts内置了）\n>\n> - 关键字**keyof**，其**相当于取值对象中的所有key组成的字符串字面量**\n> - 关键字**in**，其相当于取值字符串字面量中的一种可能，**配合泛型P， 即表示每个key** \n> - 关键字 **?** ，通过**设定对象可选选项**，即可自动推导出子集类型\n\n```ts\ninterface IMerge {\n    <T extends Record<string, any>>(sourceObj: Partial<T>, targetObj: T): T;\n}\n// Partial内部实现\ntype IPartial<T extends Record<string, any>> = {\n            [P in keyof T]?:T[P];\n}\n// 索引类型:关键字[keyof] ，其相当于取值对象中的所有key组成的字符串字面量，如\ntype IKeys = keyof{a: string; b: number }; // => type IKeys =\"a\" | \"b\"\n// 关键字[in]，其相当于取值 字符串字面量中的一种可能，配合泛型P， 即表示每个key \n// 关键字[ ? ]，通过设定对象 可选选项，即可自动推导出子集类型\n```\n\n## 函数返回值类型\n\n函数返回值类型在定义时候是不明确的，也应该通过泛型进行表达\n\n下文代码delayCall接受一个函数作为入参，其实现延迟1s运行函数func，其返回promise，结果为入参函数的返回结果\n\n```js\n// 如何实现函数delayCall的类型声明\n// delayCall接受一个函数作为入参，其实现延迟1s运行函数\n// 其返回promise，结果为入参函数的返回结果\nfunction delayCall(func) {\n    return new Promisd(resolve => {\n        setTimeout(() => {\n            const result= func );\n            resolve(result);\n        },1000);\n    });\n}\n```\n\n- 关键字 **extends** **跟随泛型出现时，表示类型推断**，其表达可**类比三元表达式**\n\n  - 如`T === 判断类型?类型A:类型B`  ->  `T extends 判断类型?类型A:类型B`\n\n- 关键字 **infer** 出现在类型推荐中，表示**定义类型变量**，可以用于**指代类型**\n\n  > [infer](https://jkchao.github.io/typescript-book-chinese/tips/infer.html#介绍) 简单示例如下：\n  >\n  > ```ts\n  > type ParamType<T> = T extends (...args: infer P) => any ? P : T;\n  > ```\n  >\n  > 在这个条件语句 `T extends (...args: infer P) => any ? P : T` 中，`infer P` 表示待推断的函数参数。\n  >\n  > 整句表示为：如果 `T` 能赋值给 `(...args: infer P) => any`，则结果是 `(...args: infer P) => any` 类型中的参数 `P`，否则返回为 `T`。\n\n  - 在这里就相当于把这个函数返回值类型指代为R\n\n```ts\ntype IDelayCall= <T extends () => any>(func: T) => ReturnType<T>;\ntype IReturnType<T extends (...args: any) => any> = T extends(...args: any ) => inferR ? R : any\n    \n// 关键字[extends] 跟随泛型出现时，表示类型推断，其表达可类比三元表达式\n// 如T === 判断类型?类型A:类型B\n// 关键字[infer] 出现在类型推荐中，表示定义类型变量，可以用于指代类型\n// 如该场景下，将函数的返回值类型作为变量，使用新泛型R表示，使用在类型推荐命中的结果中\n```\n\n# 工程应用\n\n## TypeScript工程应用——Web\n\n1. **配置webapack loader**相关配置\n2. **配置tsconfig.js**文件（宽松——严格，都可以定义）\n3. 运行webpack**启动/ 打包**\n4. loader处理ts文件时， **会进行编译与类型检查**\n\n相关loader：\n\n1. [awesome-typescript-loader](https://www.npmjs.com/package/awesome-typescript-loader)\n2. or [babel-loader](https://www.npmjs.com/package/babel-loader)\n\n## TypeScript工程应用——Node\n\n使用TSC编译\n\n1. 安装Node与npm\n2. 配置tsconfig.js文件\n3. 使用npm安装tsc\n4. 使用tsc运行编译得到js文件\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56049af605644fb9907feedd9ee14fae~tplv-k3u1fbpfcp-watermark.image?)\n\n\n\n# 总结感想\n\n这节课老师讲了TypeScript的用处与基本语法、和JS的对比、高级类型的应用，后续也深入讲了一下类型保护与类型守卫，在最后总结了TypeScript如何在工程中进行应用。TypeScript作为JS的一个超集，他增加了类型检查的功能，可以在编译阶段就将代码中的错误暴露出来，这是js这类动态类型所不具备的，在多人合作的大型项目中，使用TS往往可以获得更好的稳定性和开发效率。\n\n> 本文引用的大部分内容来自林皇老师的课以及ts官方文档~\n\n","sources":["xlog"],"summary":"这节课老师讲了TypeScript的用处与基本语法、高级类型的应用、类型保护与类型守卫 发展历史\n2012-10：微软发布了TypeScript第一个版本(0.8) 2014-10：Angular 发布了基于TypeScript的2.0版本 2015-04…","attributes":[{"value":"typescript-developmd","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/typescript-developmd"],"date_published":"2022-01-28T14:30:17.000Z"}}}