{"characterId":52270,"noteId":51,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreicwcjfjlmhntp2hckxbb5yh2r3cozgbjizca4zc5hhb5prb3hwim4","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:39:04.000Z","updatedAt":"2023-04-05T11:28:29.000Z","deletedAt":null,"publishedAt":"2022-01-25T14:30:17.000Z","transactionHash":"0xdc576b85b753d220cd2851aa2bc5e951b6f739ada0a82dfd613ec82afbd0296e","blockNumber":30317649,"logIndex":17,"updatedTransactionHash":"0xff9043795dc8f3f38c479b16b94d370b98f1c2a88b0c1ef0d884d6c1dde624f3","updatedBlockNumber":30335014,"updatedLogIndex":0,"metadata":{"uri":"ipfs://bafkreicwcjfjlmhntp2hckxbb5yh2r3cozgbjizca4zc5hhb5prb3hwim4","type":"NOTE","content":{"tags":["post","前端","Web安全","XSS","青训营"],"type":"note","title":"青训营 |「Web开发的安全之旅」","content":"---\ntitle: 青训营 |「Web开发的安全之旅」\nlink: note/front-end/bytedance-note/web-safe-getting-started\ncatalog: true\ndate: 2022-01-25 14:30:17\nsubtitle: Web安全相关知识，包括Web攻击的种类、防御方式等\nlang: cn\ntags:\n- 前端\n- Web安全\n- XSS\n- \ncategories:\n- [笔记, 青训营笔记]\n---\n#  本节课重点内容\n\n安全问题很常见，会危害\n\n- 用户\n- 公司\n- 程序员（祭天QAQ）\n\n## 两个角度看web安全\n\n### 假如你是一个hacker——攻击\n\n#### 跨站脚本攻击XSS(Cross Site Scripting)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/642c367bce854aeba444870401a60cfa~tplv-k3u1fbpfcp-watermark.image?)\n\n注入恶意脚本，完成攻击，后果：泄露用户隐私等\n\nXSS主要利用了开发者对用户提交内容的盲目信任\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46df16645186444fb853b329f03722a7~tplv-k3u1fbpfcp-watermark.image?)\n\n**特点**\n\n- 通常**难以从UI上感知**（一般都是暗地里执行脚本）\n- 窃取用户信息（**cookie/token**）\n- **绘制UI（如弹窗等）**，诱骗用户点击/填写表单\n\n举个栗子\n\n```js\npublic async submit(ctx) {\n    const {content, id} = ctx.request.body;\n    await db.save({\n       content,\t// 没有对content进行过滤！！\n       id\n    });\n}\npublic async render(ctx) {\n    const { content } = await db.query({\n        id: ctx.query.id\n    });\n    // 没有对content进行过滤！！\n    ctx.body = `<div>${content}</div>`;\n}\n```\n\n可以看到上述代码，压根没有对用户输入的content内容进行任何过滤。这个时候就可以提交一个`<script>alert('xss');</script>`脚本，进行攻击\n\nxss攻击也分几大类：Store XSS、Reflected XSS、DOM-based XSS、Mutation-based XSS\n\n##### Store XSS\n\n- 提交的恶意脚本被**存在数据库**中\n- 访问页面 -> 读数据 == 被攻击\n- **危害最大**，对全部用户可见\n- 如：某个视频网站，上传了恶意脚本被存到数据库中，从此电商网站上便多了一个视频共享账户。\n\n##### Reflected XSS\n\n- 不涉及数据库\n\n- 从 **URL** 上攻击，在URL上带上脚本\n\n  ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88c27e79158645c1a293249378d971a6~tplv-k3u1fbpfcp-watermark.image?)\n\n##### DOM-based XSS\n\n- 不需要服务器的参与\n\n- 恶意攻击的发起+执行，全在浏览器完成\n\n  ![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f120875727634ff7abeb41a2174c616e~tplv-k3u1fbpfcp-watermark.image?)\n\n- 完成注入脚本的地方，是由浏览器来的，这是它与Reflected XSS的不同之处\n\n##### Mutation-based XSS\n\n- 一个巧妙地攻击方式，利用浏览器的特性\n\n  > 如果用户所提供的富文本内容通过javascript代码进入innerHTML属性后，一些意外的变化会使得这个认定不再成立：浏览器的渲染引擎会将本来没有任何危害的HTML代码渲染成具有潜在危险的XSS攻击代码。\n\n- 巧妙，最难防御的一种方式,攻击者非常的懂浏览器\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/337518efa2844250a0bcf70cfc76fd60~tplv-k3u1fbpfcp-watermark.image?)\n\n#### Cross-site request forgery（CSRF，跨站伪造请求）\n\n- 在用户不知情的前提下\n\n- **利用用户权限**(cookie)\n\n- **构造**指定HTTP **请求**，进而窃取或修改用户敏感信息\n\n  ![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d29931c3bf24265bf503f964401c6e7~tplv-k3u1fbpfcp-watermark.image?)\n\n  一个用户访问了一个恶意的页面，这个页面向银行发送一个转账请求，ServerA为银行的服务器，发现这个请求带有用户的cookie，成功\n\n  > CSRF通过伪装来自受信任用户的请求来利用受信任的网站。与[XSS](https://link.jianshu.com/?t=http://baike.baidu.com/view/50325.htm)攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比[XSS](https://link.jianshu.com/?t=http://baike.baidu.com/view/50325.htm)`更具危险性`。\n\n#### Injection（注入）\n\n- SQL注入：通过SQL参数进行注入\n\n  ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e0499bba56f4dc69093fb38c4fa06a8~tplv-k3u1fbpfcp-watermark.image?)\n\n  案例：读取请求字段，直接以字符串的形式拼接SQL语句\n\n  ```js\n  public async rederForm(ctx) {\n      const {username, form_id } = ctx.query;\n      const result = await sql.query(`\n      \tSELECT a, b, c FROM table\n      \tWHERE username = ${username}\n      \tAND form_id = ${form_id}\n      `);\n      ctx.body = renderForm(result);\n  } \n  ```\n\n  那么攻击者可以传入一个userName：`any; DROP TABLE table;` ，于是被动删库跑路成就达成√\n\n- 命令行注入等![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e3d42c1f4754e648fc9bf793c315e02~tplv-k3u1fbpfcp-watermark.image?)\n\n- 读取+改进行流量攻击\n\n  ![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53c32ca224314a3394d709b9b08e3717~tplv-k3u1fbpfcp-watermark.image?)\n\n#### Denial of Service（DOS）攻击\n\n- 通过某种方式(构造特定请求)，导致服务器资源被显著消耗,\n\n- 来不及响应更多请求，导致请求挤压，进而雪崩效应。\n\n- 拓展：正则表达式——贪婪模式\n\n  - 重复匹配时，`?` /`no ?` ：满足`”一个即可“ ` /  `尽可能多`\n\n- 例子：ReDoS:基于正则表达式的DoS\n\n- 贪婪：n次不行 ? n-1次再试试?——回溯\n\n  ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff22b364393045b99c3139a97e5c29ba~tplv-k3u1fbpfcp-watermark.image?)\n\n- Distributed Dos （DDOS）\n\n  - 短时间内，来自大量**僵尸设备**的请求流量，服务器不能及时完成全部请求，导致请求堆积，进而雪崩效应，无法响应新请求。（量大就完事儿了）\n\n  - 特点：\n\n    - 直接访问IP\n\n    - 任意API\n\n    - 消耗大量带宽（耗尽）\n\n      ![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f866aa26f1a346e08b8f646137e0189b~tplv-k3u1fbpfcp-watermark.image?)\n\n#### 中间人攻击（传输层）\n\n- **明文传输**\n\n- **信息篡改不可知**\n\n- **对方身份未验证**\n\n  ![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/910915a7c3484d038d381b4d0990b51c~tplv-k3u1fbpfcp-watermark.image?)\n\n### 假如你是一一个开发者一一防御\n\n#### XSS攻击防御\n\n- 永远**不要信任用户**的提交内容\n\n  - **不要**将用户的提交内容**直接转换成DOM**\n\n- 现成工具\n\n  - 主流框架默认防御XSS（react等）\n  - google-closure-library\n  - 服务端：DOMPurify\n\n- 用户需求：不讲武德，必须动态生成DOM？\n\n  - new DOMParser();\n\n  - svg：也要扫描，因为其中也可以插入script标签\n\n  - 不要用户自定义跳转链接（或者做好过滤）！\n\n     `<a href=\"javascript:alert('xss')\"></a>`\n\n- 自定义样式也要留意![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e67055919de46148ce6f280d1ed61fe~tplv-k3u1fbpfcp-watermark.image?)\n\n##### 同源策略（CSP）\n\n- 协议\n- 域名\n- 端口\n\n任意一者不同，跨域×\n\n[浏览器的同源策略 - Web 安全 | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n一般的同源请求都是没有问题的，而跨域的不行，CSP允许开发者定义\n\n- 哪些源（域名）是被认为是安全的\n- 来自安全源的脚本可以被执行，否则直接抛错\n- 对eval + inline script 直接拒绝\n- 设置\n  - 服务器的响应头部\n   ```\n    Content-Security-Policy: script-src 'self'; // 同源\n    Content-Security-Policy: script-src 'self' https://domain.com\n   ```\n\t- 浏览器的响应头部\n\t ```html\n    <meta http-equiv=\" Content-Security-Policy\" content=\"script-src self\"> \n   ```\n\n#### CSRF攻击防御\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/822df87c893e470aa6d84dfba6702e4a~tplv-k3u1fbpfcp-watermark.image?)\n\n- Origin + Referrer\n- 其他判断【请求来自于合法来源】的方式\n  - 先有页面，后有请求\n    - if 请求来自合法页面\n    - then 服务器接受过页面请求\n    - then 服务器可以标识\n- ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c328ef733885407e87d34d6cbf369a6f~tplv-k3u1fbpfcp-watermark.image?)\n\n- iframe攻击：限制Origin是吧，那我同源请求\n\n- 避免GET + POST一起请求，攻击者一石二鸟！\n\n  ```js\n  // 不要像下面这样将更新+获取逻辑放到同一个GET接口\n  public async getAndUpdate(ctx) {\n      const { update, id } = ctx.query;\n      if (update) {\n          await this.update(update);\n      }\n      ctx.body = await this.get(id);\n  }\n  ```\n\n- SameSite Cookie\n\n  - 限制Cookie domain\n\n  - 页面域名是否匹配\n\n  - 依赖cookie的第三方服务怎么办？\n\n    > 内嵌一个X站播放器，识别不了用户登录态，发不了弹幕\n    >\n    > `Set-Cookie: SameSite=None; Secure ;`\n\n  ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/229b150da1cc42faae95e8e03b5d9d82~tplv-k3u1fbpfcp-watermark.image?)\n\n- SameSite vs CORS（跨站资源共享）\n\n  ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8617447577294e10a51366ec5fffa691~tplv-k3u1fbpfcp-watermark.image?)\n\n以上这么多防御CSRF的方法，那么什么是防御CSRF的正确姿势呢？写一个中间件，专门生成这方面的防御。\n\n#### Injection防御\n\n- 找到项目中查询SQL的地方\n\n- 使用prepared statement\n\n  ```\n  PREPARE q FROM 'SELECT user FROM users WHERE gender = ?';\n  SET @gender = 'female';\n  EXECUTE q USING @gender;\n  DEALLOCATE PREPARE q;\n  ```\n\n- 最小权限原则\n\n  - 所有命令都不要用 sodo || root ×\n\n- 建立允许名单 + 过滤\n\n  - rm 坚决拒绝\n\n- 对URL类型参数进行协议、域名、ip等限制\n\n  - 避免攻击者访问内网\n\n#### 防御DoS\n\n- Code Review （避免贪婪匹配等）\n- 代码扫描 + 正则性能测试\n- 避免用户提供的使用正则\n\n#### 防御DDos\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a226e027218f4859b2cc48e3a4d491e8~tplv-k3u1fbpfcp-watermark.image?)\n\n#### 传输层——防御中间人\n\n搬出大名鼎鼎的HTTPS\n\n- 可靠性：加密\n- 完整性：MAC验证\n- 不可抵赖性：数字签名\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6543366d374e40e2b3d5f416a1a13ec6~tplv-k3u1fbpfcp-watermark.image?)\n\n- 拓展：数字签名\n\n  - 私钥（自己藏好）\n\n  - 公钥（公开可见）\n\n  - CA：Certificate Authority 证书机构\n\n  - 数字签名，浏览器内置CA公钥\n\n    ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b365d8c14274b89ac46232184765713~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e477a3d38294c1a900b170673b124d2~tplv-k3u1fbpfcp-watermark.image?)\n\n- 当签名算法不够健壮时：被暴力破解（现在都已比较完善）\n\n**HTTP Strict-Transport-Security（HSTS）**\n\n- 将HTTP主动升级到HTTPS\n\n**[Subresource Integrity（SRI）](https://developer.mozilla.org/zh-CN/docs/Web/Security/Subresource_Integrity)**\n\n静态资源被劫持篡改？对比hash\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af0b7da8f78e4bc5b9ff452566d5d9d9~tplv-k3u1fbpfcp-watermark.image?)\n\n## 尾声\n\n- 安全无小事\n- 使用的依赖(npm package， 甚至是NodeJS)可能成为最薄弱的一环\n  - **[left-pad事件](https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm.html)**\n  - **[eslint-scope 事件](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes)**\n  - **[event-stream 事件](https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident)**\n- 保持学习心态\n\n## 总结感想\n\n这节课老师图文并茂的讲解了Web安全相关的很多知识，非常有意思，包括Web攻击的种类、防御方式等\n\n> 本文引用的内容大部分来自刘宇晨老师的课、MDN、外部博客引用：[这一次，彻底理解XSS攻击](https://juejin.cn/post/6912030758404259854#heading-17)、[浅谈CSRF](https://www.jianshu.com/p/7f33f9c7997b)","sources":["xlog"],"summary":"安全问题很常见，会危害 用户 公司 程序员（祭天QAQ）\n两个角度看web安全\n假如你是一个hacker——攻击\n跨站脚本攻击XSS(Cross Site Scripting)\n\n注入恶意脚本，完成攻击，后果：泄露用户隐私等\n\nXSS主要利用了开发者对用户提交内容的盲目信任…","attributes":[{"value":"web-safe-getting-startedmd","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/web-safe-getting-startedmd"],"date_published":"2022-01-25T14:30:17.000Z"}}}