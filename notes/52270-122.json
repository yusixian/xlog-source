{"characterId":52270,"noteId":122,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreigknqz2pctdqtbqvyzafwubltnthjyuwpnefnwmcbskvz5yvnzukm","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:50:46.000Z","updatedAt":"2023-04-05T06:50:46.000Z","deletedAt":null,"publishedAt":"2020-08-29T16:05:30.000Z","transactionHash":"0x6a0a82da03bb709c85a64b6b7d7760d871edebc9887dce726210d36e8b8f4430","blockNumber":30318351,"logIndex":25,"updatedTransactionHash":"0x6a0a82da03bb709c85a64b6b7d7760d871edebc9887dce726210d36e8b8f4430","updatedBlockNumber":30318351,"updatedLogIndex":25,"metadata":{"uri":"ipfs://bafkreigknqz2pctdqtbqvyzafwubltnthjyuwpnefnwmcbskvz5yvnzukm","type":"NOTE","content":{"tags":["post","c++","数据结构","散列查找"],"type":"note","title":"数据结构学习笔记＜9＞ 散列查找","content":"---\ntitle: 数据结构学习笔记＜9＞ 散列查找\nlink: 数据结构学习笔记＜9＞ 散列查找\ncatalog: true\nlang: cn\ndate:  2020-08-29 16:05:30\nsubtitle: MOOC浙江大学的数据结构慕课学习记录——散列查找\ntags:\n- c++\n- 数据结构\n- 散列查找\ncategories:\n- [笔记, 数据结构]\n---\n\n# 一、散列表（哈希表）\n## 1.概念引出\n编译处理中对变量的管理：**动态查找问题**\n - 利用查找树进行？——两个变量名（字符串）**比较效率不高** \n - **将字符串转换为数字，再处理**？——即为散列查找的思想\n已知的几种查找方法：\n - 顺序查找\tO(N)\n - 二分查找（静态查找） O(log~2~N)\n - 二叉搜索树\t\t O(h) h为二叉查找树的高度\n - 平衡二叉树 \t\t\tO(log~2~N)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200827214251878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n##### 问题：如何快速搜索到需要的关键词？若关键词不方便比较怎么办？\n查找的本质：<font color=#FF0000 > 已知对象找位置\n\n - 有序的安排对象：全序（完全有序，eg:二分搜索）、半序（某些关键词之间存在次序，eg:查找树）\n - 直接 **“算出”** 对象位置：**散列**\n\n### 散列基本工作\n - **计算位置：构造散列函数**确定关键词存储位置\n - **解决冲突：应用某种策略解决多个关键词位置相同的问题**\n### 时间 复杂度\n时间复杂度几乎是常量：O(1)，即查找时间与问题规模无关！\n\n\n\n## 2.散列查找\n### （1）基本思想\n\n - 以关键字**key**为自变量，通过一个确定的函数h **（散列函数）**，计算出对应的函数值h(key)，作为数据对象的存储地址\n - 可能不同的关键字会映射到同一个散列地址上，即h(key~i~) = h(key~j~) (当key~i~ ≠ key~j~)，称为 **“冲突(Collision)”** 。——需要某种冲突解决策略\n \n 不冲突的情况下，查找只需要根据散列函数算出地址查找\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200828191922255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n#### 装填因子\n装填因子（Loading Factor）：设散列表空间大小为m，填入表中元素个数为n，则称 α = n / m为散列表的装填因子\n - 如上图中的**α = 11 / 17 ≈ 0.65**\n如果没有溢出 则T~查询~ = T~插入~ = T~删除~ = O(1)\n#### 再散列\n - 当散列表元素过多（即装填因子α过大）时，查找效率会下降\n\t - 实用最大装填因子一般取**0.5 ≤ α ≤ 0.85**\n - 解决办法是加倍扩大散列表，该过程叫做“**再散列**(Rehashing)”\n\n### （2）散列函数的构造\n#### 两个因素\n一个“好”的散列函数一般应考虑以下两个因素：\n - **计算简单**，以便提高转换速度\n - 关键词对应的**地址空间分布均匀**，以尽量减少冲突。\n \n#### 数字关键词的散列函数构造\n##### ① 直接定址法\n取关键词的某个线性函数值为散列地址，即**h(key) = a ×key + b**\t(a、b为常数)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020082819270697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n##### ② 除留余数法（常用）\n散列函数为：**h(key) = key mod p**\neg：h(key) = key %17\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200828192839490.png#pic_center)\n一般为了尽可能使关键词对应的地址空间分布均匀，**p取素数**\n\n##### ③ 数字分析法\n通过分析数字关键字在各位上的变化情况，取**比较随机的位**作为散列地址\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200828193252877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n##### ④ 折叠法\n把关键词分割成位数相同的几个部分，然后叠加\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200828193330243.png#pic_center)\n##### ⑤ 平方取中法\n![把关键词分割成位数相同的几个部分，然后叠加](https://img-blog.csdnimg.cn/20200828193356416.png#pic_center)\n#### 字符关键词的散列函数构造\n##### 简单的散列函数——ASCII码加合法\n对字符型关键词key定义散列函数如下：**h(key) = (Σkey[i]) mod TableSize**\n**冲突严重！！**\n##### 简单的改进——前3个字符移位法\n**h(key) = (key[0] × 27^2^ + key[1] ×27 + key[2]) mod TableSize**\n**仍然冲突、空间浪费**\n##### 好的散列函数——移位法\n设计关键词的所有n个字符，且分布的很好\nh(key) = ($\\begin{matrix} \\sum_{i=0}^{n-1}key[n-i-1] \\times32^i  \\end{matrix}$) mod TableSize\n代码如下\n```cpp\ntypedef string DataType;//数据的类型\ntypedef int Index;//散列后的下标\n//返回经散列函数计算后的下标\nIndex Hash(string Key, int TableSize) { \n    unsigned int h = 0; //散列函数值，初始化为0\n    int len = Key.length();\n    for(int i = 0; i < len; ++i) \n        h = (h << 5) + Key[i];\n    \n    return h % TableSize;\n}\n```\n\n### （3）散列查找的冲突处理\n常用处理冲突的思路如下\n - 换个位置——**开放定址法**\n - 同一位置的冲突对象组织在一起——**链地址法**\n#### 开放定址法\n开放定址法(Open Addressing)，一旦产生了**冲突**（该位置已有其他元素），则按某种规则去**寻找另一空地址**。其优点是散列表是一个数组，存储效率高，随机查找，缺点是散列表有“聚集”现象。在开放地址散列法中删除操作需要很小心，只能“懒惰删除”，即需要增加一个删除标记而不是真正的删除，以便查找时不会“断链”。其空间可以在下次插入时重用。\n - 若发生了**第 i 次冲突**，试探的下一个地址将**增加d~i~**，基本公式是：**h~i~(key) = (h(key) + d~i~)  mode TableSize(1 ≤ i < TableSize)**\n - **d~i~** 为多少决定了不同的解决冲突方案：**线性探测(d~i~ = i)、平方探测(d~i~ = ± i^2^)、双散列(d~i~ = i*h~2~(key))。**\n\n#### ① 线性探测法\n以增量序列1，2，……，（TableSize - 1）循环试探下一个存储地址。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829133500317.png#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829132925837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n#### ② 平方探测法（二次探测）\n以增量序列1^2^，-1^2^，2^2^，-2^2^，……，q^2^，-q^2^且q ≤ | TableSize/2 |循环试探下一个存储地址。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829133548833.png#pic_center)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829133557287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n平方探测是否能找得到所有空间？有定理如下：\n\n - 如果散列表长度TableSize是某个**4k+3**（k是正整数）形式的**素数**时，**平方探测法就可以探查到整个散列表空间**\n \n\n```cpp\n//查找Key元素,这里采用平方探测法处理冲突\nIndex Find(ptrHash H, DataType Key) {\n    Index nowp, newp;\n    int Cnum = 0;//记录冲突次数\n    newp = nowp = Hash(Key, H->TableSize);\n    //若该位置的单元非空且不是要找的元素时发生冲突\n    while(H->Units[newp].flag != Empty && H->Units[newp].data != Key) {\n        ++Cnum;//冲突增加一次\n        if(++Cnum % 2) {\n            newp = nowp + (Cnum+1)*(Cnum+1)/4;//增量为+i^2,i为(Cnum+1)/2\n            if(newp >= H->TableSize)\n                newp = newp % H->TableSize;\n        } else {\n            newp = nowp - Cnum*Cnum/4;//增量为-i^2,i为Cnum/2\n            while(newp < 0)\n                newp += H->TableSize;\n        }\n    }\n    return newp;//返回位置，该位置若为一个空单元的位置则表示找不到\n}\n```\n\n#### ③ 双散列探测法\n**d~i~为i*h~2~(key)**，**h~2~(key)是另一个散列函数**，探测序列成h~2~(key)，2h~2~(key)，3h~2~(key)……\n - 对任意的key，h~2~(key) ≠ 0！\n - 探测序列还应该保证所有的散列存储单元都应该能够被探测到，选择以下形式有良好的效果：**h~2~(key) = p - (key mod p)**\n其中p < TableSize，p、TableSize都是素数\n\n#### 分离链接法\n分离链接法(Separate Chaining)，将相应位置上冲突的所有关键词**存储在一个单链表中**。优点是关键字的删除不需要“懒惰删除法”从而没有存储垃圾，缺点是链表部分的存储效率和查找效率都比较低。链表长度的不均匀会导致时间效率的严重下降\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020082913474499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n\n### （4）散列查找的操作集（代码）\n这里给出字符串的散列查找，Hash函数采用移位法，解决冲突采用开放定址法中的平方探测法，其他的在其基础上更改即可\n#### 定义\n```cpp\nconst int MaxSize = 100000;\ntypedef int Index;//散列后的下标\ntypedef string DataType;//散列单元中存放的元素类型\n//散列单元状态类型，分别对应：有合法元素、空单元、有已删除元素\ntypedef enum {Legitimate, Empty, Deleted} EntryType;\nstruct HashNode {   //散列表单元类型\n    DataType data;      //存放元素\n    EntryType flag;     //单元状态\n};\nstruct HashTable {  //散列表类型\n    int TableSize;      //表长\n    HashNode *Units;\t//存放散列单元的数组\n};\ntypedef HashTable *ptrHash;\n```\n#### 获取素数\n返回大于N且不超过MaxSize的最小素数，用于保证散列表的最大长度为素数，尽可能使关键词对应的地址空间分布均匀\n```cpp\n//返回大于N且不超过MaxSize的最小素数，用于保证散列表的最大长度为素数\nint NextPrime(int N) {\n    int i, p = (N%2) ? N+2 : N+1;//从大于N的下一个奇数p开始\n    while(p <= MaxSize) {\n        for(i = (int)sqrt(p); i >= 2; i--) \n            if(!(p % i)) break;//不是素数\n        if(i == 2) break;//for正常结束，是素数\n        else p += 2;//试探下一个奇数\n    }\n    return p;\n}\n```\n\n#### 创建空表\n创建一个长度大于TableSize的空表。（确保长度为素数）\n\n```cpp\nptrHash CreateTable(int TableSize) {\n    ptrHash H;\n    int i;\n    H = new HashTable;\n    H->TableSize = NextPrime(TableSize);\n    H->Units = new HashNode[H->TableSize];\n    for(int i = 0; i < H->TableSize; ++i) \n        H->Units[i].flag = Empty;\n    return H;\n}\n```\n#### Hash计算\n返回经散列函数计算后的下标 这里关键字数据类型为string,采用移位法散列\n```cpp\nIndex Hash(DataType Key, int TableSize) { \n    unsigned int h = 0; //散列函数值，初始化为0\n    string str = Key.str;\n    int len = str.length();\n    for(int i = 0; i < len; ++i) \n        h = (h << 5) + str[i];\n    return h % TableSize;\n}\n```\n#### 查找操作\n查找Key元素,这里采用平方探测法处理冲突，返回位置下标，该位置若为一个空单元的位置则表示找不到\n\n```cpp\nIndex Find(ptrHash H, DataType Key) {\n    Index nowp, newp;\n    int Cnum = 0;//记录冲突次数\n    newp = nowp = Hash(Key, H->TableSize);\n    //若该位置的单元非空且不是要找的元素时发生冲突\n    while(H->Units[newp].flag != Empty && H->Units[newp].data != Key) {\n        ++Cnum;//冲突增加一次\n        if(++Cnum % 2) {\n            newp = nowp + (Cnum+1)*(Cnum+1)/4;//增量为+i^2,i为(Cnum+1)/2\n            if(newp >= H->TableSize)\n                newp = newp % H->TableSize;\n        } else {\n            newp = nowp - Cnum*Cnum/4;//增量为-i^2,i为Cnum/2\n            while(newp < 0)\n                newp += H->TableSize;\n        }\n    }\n    return newp;//返回位置，该位置若为一个空单元的位置则表示找不到\n}\n```\n#### 插入操作\n将Key插入到表中，返回插入成功或失败，失败则说明该键值已存在\n\n```cpp\nbool Insert(ptrHash H, DataType Key) {\n    Index p = Find(H, Key);\n    if(H->Units[p].flag != Legitimate) {//该位置可插入元素\n        H->Units[p].flag = Legitimate;\n        H->Units[p].data = Key;\n        //其他操作\n        return true;\n    } else {//该键值已存在\n        //其他操作\n        return false;\n    }\n}\n```\n### （5）性能分析\n散列表的查找效率通过以下因素分析：\n\n - 成功平均查找长度（ASLs）\n - 不成功平均查找长度（ASLu）\n \n 以线性探测法中的例题为例分析如下这个散列表的性能\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829135055857.png#pic_center)\n\n - 其**ASLs**为查找表中关键词的**平均查找比较次数（即其冲突次数加1）**\nASLs = （1+7+1+1+2+1+4+2+4）/ 9 = 23 / 9 ≈ 2.56\n  - 其**ASLu**为不在散列表中的关键词的平均查找比较次数（不成功）\n  一般方法：将不在散列表中的关键词分若干类，如按其H(key)值分类的话，此处的H(key) = key mod 11，分11类分析，ASLu如下\nASLu = （3+2+1+2+1+1+1+9+8+7+6）/ 11 = 41 / 11 ≈ 3.73\n\n关键词的比较次数，取决于产生冲突的多少，而影响产生冲突多少有以下三个因素\n\n 1. 散列函数是否均匀\n 2. 处理冲突的方法\n 3. 散列表的装填因子α\n 不同冲突处理方法和装填因子对于效率的影响如下\n#### ① 线性探测法的查找性能\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829140548842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n\n#### ② 平方探测法和双散列探测法的查找性能\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829140637993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n当装填因子α<0.5时，各种探测法的期望探测次数都不大，也比较接近，随着α的增大，线性探测法的期望探测次数增加较快，不成功查找和插入操作的期望探测次数要比成功查找的期望探测次数要大。所以，**合理的最大装入因子应该不超过0.85**\n\n#### ③ 分离链接法的查找性能\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200829142249188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70#pic_center)\n#### 总结\n\n - 选择**合适的h(key)的话，散列法的查找效率期望是常数O(1)**，它几乎与关键字的空间的大小n无关！也适合于关键字直接比较计算量大的问题\n - 它是以**较小的α**为前提，因此，散列方法是一个**以空间换时间**的方法\n - 散列方法的**存储**对关键字是**随机**的，**不便于顺序查找**关键字，也**不适合于范围查找**，或**最大值最小值**查找。","sources":["xlog"],"attributes":[{"value":"shu-ju-jie-gou-xue-xi-bi-ji-9-san-lie-cha-zhao-md","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/shu-ju-jie-gou-xue-xi-bi-ji-9-san-lie-cha-zhao-md"],"date_published":"2020-08-29T16:05:30.000Z"}}}