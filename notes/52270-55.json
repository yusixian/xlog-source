{"characterId":52270,"noteId":55,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreiblordqubx4oywfjbmp7roan2kqz3au33xraeqqe2n6ga5iyfsr7y","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:39:52.000Z","updatedAt":"2023-04-05T06:39:52.000Z","deletedAt":null,"publishedAt":"2022-04-08T03:41:49.000Z","transactionHash":"0x16c8bbbc59b889d2e6569492006a2c6cfbcfe39cb15611ff19baebf93088d12d","blockNumber":30317697,"logIndex":2,"updatedTransactionHash":"0x16c8bbbc59b889d2e6569492006a2c6cfbcfe39cb15611ff19baebf93088d12d","updatedBlockNumber":30317697,"updatedLogIndex":2,"metadata":{"uri":"ipfs://bafkreiblordqubx4oywfjbmp7roan2kqz3au33xraeqqe2n6ga5iyfsr7y","type":"NOTE","content":{"tags":["post","编译原理"],"type":"note","title":"编译原理 实验一 词法分析器设计","content":"---\ntitle: 编译原理 实验一 词法分析器设计 \nlink: compile-learning-experiment_1\ncatalog: true\nlang: cn\ndate: 2022-04-08 03:41:49 \nsubtitle: 记录下编译原理第一次实验~\ntags:\n- 编译原理\ncategories:\n- [笔记, CS基础]\n---\n源代码仓库：[CompilePrincipleLearning/experiment_1 · yusixian/CompilePrincipleLearning (github.com)](https://github.com/yusixian/CompilePrincipleLearning/tree/master/experiment_1)\n\n# 一.\t实验目的\n\n1．\t深入理解有限自动机及其应用\n2．\t掌握根据语言的词法规则构造识别其单词的有限自动机的方法\n3．\t基本掌握词法分析程序的开发方法\n4．\t能够设计词法扫描器程序，对源程序进行词法分析，并输出单词序列\n\n# 二.\t实验内容及要求\n\n编写识别单词的词法分析程序。\n\n已知某语言中各类单词的DFA如下图，编写程序实现：\n\n1、输入：txt文件（存放要分析的源程序）\n\n2、输出：从输入的源程序中，识别出各个具有独立意义的单词，即基本保留字、标识符、常数、运算符、分隔符五大类。并依次输出各个单词的种别码及单词符号自身值。（遇到错误时可显示“Error”，然后跳过错误部分继续显示）。\n\n输出格式：每个单词的表示：（种别码，单词符号自身值）\n\n要求：对识别出的每一单词均单行输出。\n\n源程序中每类单词都要有\n\n# 三.\t实验过程\n\n## 1、设计的DFA转换图\n\n字母与下划线：`letter -> A|B|…|Z|a|b|c|d…|y|z|_`\n\n数字：`digit1 -> 1~9 digit-> 0~9`\n\n标识符定义：`id -> letter(letter|digit)*`\n\n运算符定义：`op ->  +-*/%=!&|<>`\n\n关键字定义：`keyword -> int float const bool void char double struct return if else while do static break for switch case default continue true false `\n\n界符定义：`delimiter -> ; , ' \" * */ ? : ( ) [ ] } { .`\n\n整型定义：`int -> (+|-)(0 | digit1 digit*) `\n\n字符常量：`char -> letter|digit|……`\n\n字符串常量：`string -> char*`\n\n实型定义：`double-> (0|(+|-)digit1 digit*)(.digit*)`\n\n我画的DFA如图\n\n![myDFA.png](https://img-blog.csdnimg.cn/img_convert/6b190d7bfbbbf46ee2a839bd20c042d4.png)\n\n## 2、采用的数据结构\n\n输出Token流为类型名称+种别码+值（该关键字/变量名/数字/运算符/界符），重载输出流。\n\n```cpp\nstruct Token {\n    int type;   // 种别码\n    string value;       // 值 关键字/变量名/数字/运算符/界符\n    string category;    // 种别码对应的类型名称\n    Token(int type, string value, string category) : type(type), value(value), category(category) {}\n    friend ostream& operator<<(ostream& os, const Token& t) {\n        os << t.category << \", type: \" << t.type << \", value: \" << t.value;\n        return os;\n    }\n};\n```\n\n![keyword.png](https://img-blog.csdnimg.cn/img_convert/9e3a5b13718813da233c99b3adaf8ea3.png)\n\n![operator.png](https://img-blog.csdnimg.cn/img_convert/37c133139afdf1e2d7a00a9aad6ccd79.png)\n\n![delimiter.png](https://img-blog.csdnimg.cn/img_convert/b11f845d3963fe8c9f03329f4a1e9d3b.png)\n\n![else.png](https://img-blog.csdnimg.cn/img_convert/74358fddb970de5001fd2ed991a7b1ec.png)\n\n## 3、头文件声明和全局变量定义\n\n如下，应该非常的一目了然吧。\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <fstream>\n#include <map>\nusing namespace std;\nconst string CategoryFileName = \"./categoryCode.txt\";\nconst string CodeFileName = \"./code.txt\";\nstring keywords[22];  // 关键字表 种别码1-22\nstring operate[28];  // 运算符表 种别码23-50\nstring delimiter[15];  // 界符表 种别码51-65\nmap<string, int> categoryCode;  // 种别码表\nconst string op = \"+-*/%=!&|<>\";\nconst int _EOF_ = -2;\nconst int _ERROR_ = -1;\nenum { \n    _ID_, _INT_, _DOUBLE_, _OPERATOR_, _DELIMITER_, _KEYWORD_, _CHAR_, _STRING_, _COMMENT_, _SPACE_\n};  // 类型\nstring cat[10] = { \"id\", \"int\", \"double\", \"operator\", \"delimiter\", \"keyword\", \"char\", \"string\", \"comment\", \"space\" };\nstruct Token {\n    int type;   // 种别码\n    string value;       // 值 关键字/变量名/数字/运算符/界符\n    string category;    // 种别码对应的类型名称\n    Token(int type, string value, string category) : type(type), value(value), category(category) {}\n    friend ostream& operator<<(ostream& os, const Token& t) {\n        os << t.category << \", type: \" << t.type << \", value: \" << t.value;\n        return os;\n    }\n};\nint pos, len;  // 当前字符位置和长度\nstring code, tempToken;  // 当前识别的字符串\nvector<Token> tokenList;  // 存储识别出的token\n```\n\n## 4、函数汇总\n\n### （1）函数汇总表\n\n| 函数名称        | 功能简述                                                                                                                                 |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| `readFile`    | 读取文件函数，返回一个string动态数组                                                                                                     |\n| `init`        | 初始化函数，在该函数中进行读取种别码文件、关键字文件，并进行相应赋值与初始化                                                             |\n| `peek`        | 探测下一个字符，若存在则返回该字符，否则返回\\0即字符串结束符                                                                             |\n| `isDigit`     | 判断字符ch是否为数字0-9                                                                                                                  |\n| `isLetter`    | 判断字符ch是否为字母或下划线（即A-Z a-z _ ）                                                                                             |\n| `isKeyword`   | 判断字符串s是否为关键字（在关键字表中）                                                                                                  |\n| `isOP`        | 判断字符ch是否为单个运算符（在op中）                                                                                                     |\n| `isOperator`  | 判断字符串s是否为运算符（运算符表中）                                                                                                    |\n| `isDelimiter` | 判断字符ch是否为界符（在operate中）                                                                                                      |\n| `judge`       | 核心函数，判断并返回当前字符（`code[pos]`）的枚举类型，并对一些特殊的token进行处理后直接放入 `tokenList`（如注释、字符和字符串常量） |\n| `read_next`   | 核心函数，读取下一个字符，根据返回的枚举类型，将对应的token放入 `tokenList `                                                           |\n| `main`        | 主程序入口，从此进入，调用 `init`函数初始化                                                                                            |\n\n### （2）函数的调用关系\n\n![function.png](https://img-blog.csdnimg.cn/img_convert/aff661018b1f196d8c6165e924db2cd1.png)\n\n## 5、实验结果\n\n### 输入\n\ncode.txt\n\n```\nint main() {\n    char ch = 'ss';\n    string str = \"Hello, World!\"\n    char ch2 = 's';\n    init();\n    double x = 10.31;/* some comment */\n    int m = 0;\n    int y = 310, m = 0.31;\n    while(pos < len) {\n        int flag = read_next();\n        if(flag == _EOF_) break;\n        if(flag != _ERROR_) {\n            Token t(flag, tempToken);\n            tokenList.push_back(t);\n            cout << t << endl;\n        } else cout << \"Error!\" << endl;\n    }\n    return 0;\n}\n```\n\n### 输出\n\n![0I3RK{8 N%JNPNA</code></code></code></code></code></code></code></code></code></code></code></code></code></code></code></code>(WB_R.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2c8cbe0d32a4149a4d8ec9525d9b39a~tplv-k3u1fbpfcp-watermark.image?)\n\n# 四、实验总结\n\n此次实验还是很有意思的，最终跑通的时候也是非常有成就感，个人感觉不用拘泥于用什么算法，只需要捋清楚自己的思路，如何设计才能使这个程序能正确识别？主要有一个优先级的思路，空格和换行符会被跳过，然后先判断是否为数字或者字母，在进行相应处理，然后进行一些特殊界符的判断，如字符串、注释等。我认为代码就足以很好的说清楚这个流程。这个程序暂时只使用常用符号（.）来支持小数，如果需要更多，可以在judge中的isdigit()后进行修改，改起来并不困难。显然，judge函数中的函数还可以拆成更细致的几个函数，但这就等以后再补全了。\n\n# 五、思考题回答\n\n## 程序设计中哪些环节影响词法分析的效率？如何提高效率？\n\n答：有待优化的部分还有不少，例如在判断是否为关键字时，目前的方法是把可能为标识符或者关键字的字符串读取完后存放在一个字符数组后再逐个与关键字表进行匹配，可改为在读取的同时判断，这样会提高效率。还有就是界符匹配也是同理。\n\n# 完整代码\n\n```cpp\n/*\n * @Author: cos\n * @Date: 2022-04-05 00:10:59\n * @LastEditTime: 2022-04-08 02:37:49\n * @LastEditors: cos\n * @Description: 词法分析器设计实现\n * @FilePath: \\CS\\experiment_1\\demo\\main.cpp\n */\n#include <iostream>\n#include <vector>\n#include <string>\n#include <fstream>\n#include <map>\nusing namespace std;\nconst string CategoryFileName = \"./categoryCode.txt\";\nconst string CodeFileName = \"./code.txt\";\nstring keywords[22];  // 关键字表 种别码1-22\nstring operate[28];  // 运算符表 种别码23-50\nstring delimiter[15];  // 界符表 种别码51-65\nmap<string, int> categoryCode;  // 种别码表\nconst string op = \"+-*/%=!&|<>\";\nconst int _EOF_ = -2;\nconst int _ERROR_ = -1;\nenum { \n    _ID_, _INT_, _DOUBLE_, _OPERATOR_, _DELIMITER_, _KEYWORD_, _CHAR_, _STRING_, _COMMENT_, _SPACE_\n};  // 类型\nstring cat[10] = { \"id\", \"int\", \"double\", \"operator\", \"delimiter\", \"keyword\", \"char\", \"string\", \"comment\", \"space\" };\nstruct Token {\n    int type;   // 种别码\n    string value;       // 值 关键字/变量名/数字/运算符/界符\n    string category;    // 种别码对应的类型名称\n    Token(int type, string value, string category) : type(type), value(value), category(category) {}\n    friend ostream& operator<<(ostream& os, const Token& t) {\n        os << t.category << \", type: \" << t.type << \", value: \" << t.value;\n        return os;\n    }\n};\nint pos, len;  // 当前字符位置和长度\nstring code, tempToken;  // 当前识别的字符串\nvector<Token> tokenList;  // 存储识别出的token\n// 读文件\nvector<string> readFile(string fileName) {\n    vector<string> res;\n    try {\n        ifstream fin;\n        fin.open(fileName);\n        string temp;\n        while (getline(fin, temp))\n            res.push_back(temp);\n        return res;\n    } catch(const exception& e) {\n        cerr << e.what() << '\\n';\n        return res;\n    }\n}\nvoid init() {\n    vector<string> res = readFile(CategoryFileName); \n    // cout << \"len:\" << len << endl;\n    for(int i = 0; i < 22; ++i) {\n        keywords[i] = res[i];\n        categoryCode[res[i]] = i+1;\n        // cout << \"keyword:\" << res[i] << endl;\n    }\n    for(int i = 0; i < 28; ++i) {\n        operate[i] = res[i + 22];\n        categoryCode[res[i+22]] = i+23;\n        // cout << \"operate:\" << res[i + 22] << endl;\n    }\n    for(int i = 0; i < 15; ++i) {\n        delimiter[i] = res[i + 50];\n        categoryCode[res[i+50]] = i+51;\n        // cout << \"delimiter:\" << res[i + 50] << endl;\n    }\n    res = readFile(CodeFileName);\n    for(int i = 0; i < res.size(); ++i)\n        code += res[i]+'\\n';\n    len = code.size();\n}\nchar peek() {\n    if (pos+1 < len) return code[pos+1];\n    else return '\\0';\n}\ninline bool isDigit(char c) {\n    return c >= '0' && c <= '9';\n}\n// 是否为字母或下划线\ninline bool isLetter(char c) {\n    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_';\n}\nbool isKeyword(string s) {\n    for(int i = 0; i < 22; ++i)\n        if (s == keywords[i]) \n            return true;\n    return false;\n}\nbool isOP(char ch) {\n    return op.find(ch) != string::npos;\n}\nbool isOperator(string s) {\n    for(int i = 0; i < 28; ++i)\n        if (s == operate[i]) return true;\n    return false;\n}\nbool isDelimiter(char ch) {\n    for(int i = 0; i < 15; ++i)\n        if (ch == delimiter[i][0]) return true;\n    return false;\n}\nint judge(char ch) {\n    if(ch == '\\n' || ch == ' ') return _SPACE_;\n    if(isDigit(ch)) {\n        char nextChar = peek();\n        if(ch == '0' && nextChar == '.') { // 0.多少\n            ++pos;\n            if(!isDigit(peek()))   // .后面不是数字\n                return _ERROR_;\n            tempToken = \"0.\";\n            while(isDigit(peek())) {\n                tempToken += peek();\n                ++pos;\n            }\n            return _DOUBLE_;    // 8\n        } else if(ch == '0' && !isDigit(nextChar)) { // 不是数字也不是.，说明是单纯的一个0\n            tempToken = \"0\";\n            return _INT_;   // 5\n        } else if(ch != '0') {  // digit1\n            tempToken = ch;\n            while(isDigit(peek())) {\n                tempToken += peek();\n                ++pos;\n            }\n            char nextChar = peek();\n            if(nextChar == '.') {\n                tempToken += nextChar;\n                ++pos;\n                nextChar = peek();\n                if(isDigit(nextChar)) {\n                    tempToken += peek();\n                    ++pos;\n                    while(isDigit(peek())) {\n                        tempToken += peek();\n                        ++pos;\n                    }\n                    return _DOUBLE_;    // 8\n                } else return _ERROR_;\n            } else return _INT_;    // 6\n        } else {    // 0+数字\n            ++pos;\n            return _ERROR_;         // ERROR\n        }\n    }\n    if(isLetter(ch)) {\n        tempToken = ch;\n        char nextChar = peek();\n        while( isLetter(nextChar) || isDigit(nextChar) ) { // 标识符~\n            tempToken += nextChar;\n            ++pos;\n            nextChar = peek();\n        }\n        return isKeyword(tempToken) ? _KEYWORD_ : _ID_;\n    } \n    if(ch == '\\\"') {\n        tokenList.push_back(Token(54, \"\\\"\", cat[_DELIMITER_]));\n        tempToken = \"\";\n        char nextChar = peek();\n        while(nextChar != '\\\"') {\n            tempToken += nextChar;\n            ++pos;\n            nextChar = peek();\n        }\n        tokenList.push_back(Token(69, tempToken, cat[_STRING_]));\n        tokenList.push_back(Token(54, \"\\\"\", cat[_DELIMITER_]));\n        pos += 2;\n        return _STRING_;\n    }\n    if(ch == '\\'') {\n        tempToken = \"\";\n        ++pos;\n        char nextChar = peek();\n        if(nextChar == '\\'') {\n            tokenList.push_back(Token(53, \"\\'\", cat[_DELIMITER_]));\n            tempToken += code[pos];\n            tokenList.push_back(Token(68, tempToken, cat[_CHAR_]));\n            tokenList.push_back(Token(53, \"\\'\", cat[_DELIMITER_]));\n            ++pos;\n            return _CHAR_;\n        } else if(code[pos] == '\\'') {\n            tokenList.push_back(Token(53, \"\\'\", cat[_DELIMITER_]));\n            tokenList.push_back(Token(68, tempToken, cat[_CHAR_]));  // 空字符串\n            tokenList.push_back(Token(53, \"\\'\", cat[_DELIMITER_]));\n            return _CHAR_;\n        } else {\n            while(pos < len && nextChar != '\\'') {\n                ++pos;\n                nextChar = peek();\n            }\n            ++pos;\n            return _ERROR_;\n        }\n    }\n    if(ch == '/') {\n        if(peek() == '*') {\n            ++pos;\n            char nextChar = peek();\n            ++pos;\n            tempToken = \"\";\n            while(pos < len) {\n                if(nextChar == '*' && peek() == '/') {\n                    tokenList.push_back(Token(55, \"/*\", cat[_DELIMITER_]));\n                    tokenList.push_back(Token(71, tempToken, cat[_COMMENT_]));\n                    tokenList.push_back(Token(56, \"*/\", cat[_DELIMITER_]));\n                    ++pos;\n                    ++pos;\n                    return _COMMENT_;\n                } else {\n                    tempToken += nextChar;\n                    nextChar = peek();\n                    ++pos;\n                }\n            }\n            return _ERROR_;\n        }\n    }\n\n    if(isOP(ch)) {   // op运算符\n        tempToken = \"\";\n        tempToken += ch;\n        char nextChar = peek();\n        if(isOP(nextChar)) {\n            if(isOperator(tempToken + nextChar)) {\n                tempToken += nextChar;\n                ++pos;\n                return _OPERATOR_;      // 15\n            } else return _OPERATOR_;   // 14\n        } else return _OPERATOR_;       // 14\n    }\n    if(isDelimiter(ch)) {\n        tempToken = \"\";\n        tempToken += ch;\n        return _DELIMITER_;\n    }\n    return _ERROR_;  \n}\nint read_next() {\n    int type = judge(code[pos]);\n    while(pos < len && type == _SPACE_) {\n        ++pos;\n        type = judge(code[pos]);\n    }\n    if(pos >= len) return _EOF_; \n    ++pos;\n    if(type == _ERROR_) return _ERROR_;\n    if(type == _DOUBLE_) {\n        // cout << \"double: \" << tempToken << endl;\n        tokenList.push_back(Token(67, tempToken, cat[_DOUBLE_]));\n        return _DOUBLE_;\n    }\n    if(type == _INT_) {\n        // cout << \"int: \" << tempToken << endl;\n        tokenList.push_back(Token(66, tempToken, cat[_INT_]));\n        return _INT_;\n    }\n    if(type == _ID_) {  // 标识符\n        // cout << \"id: \" << tempToken << endl;\n        tokenList.push_back(Token(70, tempToken, cat[_ID_]));\n        return _ID_;\n    }\n    if(type == _OPERATOR_ || type == _KEYWORD_ || type == _DELIMITER_) {\n        tokenList.push_back(Token(categoryCode[tempToken], tempToken, cat[type]));\n        return type;\n    }\n    return _ERROR_;\n}\nint main() {\n    init();\n    while(pos < len) {\n        int flag = read_next();\n        if(flag == _EOF_) break;\n        else if(flag == _ERROR_) tokenList.push_back(Token(_ERROR_, \"ERROR!\", \"ERROR\"));\n    }\n    for(auto t : tokenList)\n        cout << t << endl;\n    return 0;\n}\n```\n","sources":["xlog"],"attributes":[{"value":"bian-yi-yuan-li-shi-yan-yi-md","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/bian-yi-yuan-li-shi-yan-yi-md"],"date_published":"2022-04-08T03:41:49.000Z"}}}