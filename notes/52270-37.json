{"characterId":52270,"noteId":37,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreiatqjf4tarbkbekroi66tk4fixcmwlam4cmg6qf3by2l4gfnxi7om","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:39:04.000Z","updatedAt":"2023-04-05T11:29:56.000Z","deletedAt":null,"publishedAt":"2022-01-20T14:30:17.000Z","transactionHash":"0xdc576b85b753d220cd2851aa2bc5e951b6f739ada0a82dfd613ec82afbd0296e","blockNumber":30317649,"logIndex":3,"updatedTransactionHash":"0x2bd03b58231e3860e8ae021a29a305724796e6c08e88372bbd7562f7377fe235","updatedBlockNumber":30335101,"updatedLogIndex":0,"metadata":{"uri":"ipfs://bafkreiatqjf4tarbkbekroi66tk4fixcmwlam4cmg6qf3by2l4gfnxi7om","type":"NOTE","content":{"tags":["post","CSS","JavaScript","前端","调试","青训营"],"type":"note","title":"青训营 |「前端必须知道的开发调试知识」","content":"---\ntitle: 青训营 |「前端必须知道的开发调试知识」\nlink: note/front-end/bytedance-note/development-and-debugging\ncatalog: true\ndate: 2022-01-20 14:30:17\nsubtitle: Chorme devTools的调试使用、移动端调试等\nlang: cn\ntags:\n- CSS\n- JavaScript\n- 前端\n- 调试\ncategories:\n- [笔记, 青训营笔记]\n---\n## 前端Debug的特点\n\n**多平台**\n\n浏览器、Hybrid、NodeJs、小程序、桌面应用……\n\n**多环境**\n\n本地开发环境、线上环境\n\n**多工具**\n\nChrome devTools、Charles、Spy-Debugger、Whistle、vConsole……\n\n**多技巧**\n\nConsole、BreakPoint、sourceMap、代理……\n\n## Chorme devTools\n\nChorme devTools谷歌浏览器自带的调试工具，功能非常之强大，包括现在很多浏览器也采用了这个调试工具，它既可以动态的添加/删除样式并实时的显示出来\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94e325f9e70142a7b8e3f555ee9d78cd~tplv-k3u1fbpfcp-watermark.image?)\n\n### 强制状态显示\n\n可以将一些特定状态下显示的元素显示出来（比如hover、active等）\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fab92caa05ae492981e842122447f988~tplv-k3u1fbpfcp-watermark.image?)\n\n也可以通过右侧的样式栏强制元素状态/添加伪类等等![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e233f0153dbd4105a857af41c5521fbd~tplv-k3u1fbpfcp-watermark.image?)\n\n还可以筛选样式\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f864d2402684b37ad6c449981b801f0~tplv-k3u1fbpfcp-watermark.image?)\n\n### 截图\n\n是的没错，可以对节点进行截图，非常的amazing啊（bushi\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56537482cd824642adb2cfa6e8853f6a~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1dd335f74a540b588747691e953ff81~tplv-k3u1fbpfcp-watermark.image?)\n\n### console\n\njs中的console.log就会记录在这儿，不用多说了吧，想必都用过~\n\n不过有一点需要提及的是，也可以输出带样式的文字方便调试时即时定位，如：\n\n```js\nconsole.log('%s %o,%c%s', 'hello', {name:'我是姓名', age: 18}, 'font-size:20px; color:red; ', 'Welcome to bytedance!');\n```\n\n这里的%s是输出字符串，%o输出对象，%c输出样式（用过c/c++格式化输出的都晓得，不过这里的%c是样式嗷）\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6526a282fb864ce5a748bb1db356a222~tplv-k3u1fbpfcp-watermark.image?)\n\nconsole.table可以具象化的展示一个对象数组，非常方便\n\n```js\nconst persons = [{id:1, name:'张三', age: 18, des: '好耶'},{id:2, name:'李四', age: 24, des: '我是李四'}, {id:3, name:'王五', age: 20, des: '这是什么'}];\n```\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef323dac5afd41bda639c3b7f56bee4a~tplv-k3u1fbpfcp-watermark.image?)\n\n树形结构dir\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2762569bf23e480aabdf8f8c5fa8b8e8~tplv-k3u1fbpfcp-watermark.image?)\n\n### Soure Tab\n\n顾名思义，展示源代码中的内容，可以增加断点、进行单步调试等。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5dfbad740c6c49f29b1a149ae40fad0a~tplv-k3u1fbpfcp-watermark.image?)\n\n在代码中某行执行 `debugger` 或打个断点就会在执行到这行的时候暂停，之后就可以继续单步调试了，之后的调试就不做过多介绍了，直接上手试试就能明白。（后端调试多了这个很容易习惯x相当于打了个断点）\n\n其他还有当请求发生时打断点：XHR/fetch breakpoints、给元素结构添加断点（删除等）、**scope可以查看作用域列表，(包括[闭包 ](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures))**、CallStack可以查看当前JavaScript代码的调用栈等。\n\n### 压缩后的代码如何调试？SouceMap\n\n前端代码天生具有“开源”属性，出于安全考虑，JavaScript代码通常会被webpack等工具进行压缩，而压缩后的代码通常只有一行，变量使用a、b等进行替换，整体变得不可阅读，那么压缩后的代码如何调试呢？\n\nwebpack 打包时可以多产出一个[Source Map](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit)程序，会将压缩后的代码和真实的文件进行[映射](https://www.murzwin.com/base64vlq.html))，抛出异常时就将其映射出来，而在上线后将Source Map映射删除。\n\n### Perfomance \n\n性能面板，可以生成报告，包括\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/348524fc8aa9465ab097f7af30e81d33~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc744d9b92ec438692d96add9980ba7a~tplv-k3u1fbpfcp-watermark.image?)\n\n### NetWork\n\n查看网络请求的面板，查看请求头/响应等等。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07e1c95a1b9b4e989250301f9d35d5f6~tplv-k3u1fbpfcp-watermark.image?)\n\n### Application\n\n该面板展示与本地存储相关的信息\n\n- Local Storage\n- Session Storage\n- IndexedDB\n- Web SQL\n- Cookie\n\n小技巧：点击该面板下的Storage面板中的Clear Site Data就可以清除该网页的本地存储数据，无需打开浏览器设置进行清除。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb0e5e2661de47fba572db570fb27539~tplv-k3u1fbpfcp-watermark.image?)\n\n## 移动端 H5 调试\n\n### 真机调试\n\n#### ios\n\n1. 使用Lightning 数据线将iPhone与Mac相连\n\n2. iPhone开启Web检查器(设置 -> Safari -> 高级 -> 开启Web检查器)\n\n3. iPhone使用Safari浏览器打开要调试的页面\n\n4. Mac打开 Safari浏览器调试(菜单栏 -> 开发 -> iPhone设备名 -> 选择调试页面)\n\n5. 在弹出的Safari Developer Tools中调试\n\n> 没有iPhone设备可以在Mac AppStore安装Xcode使用其内置的ios模拟器\n\n#### Android\n\n1. 使用USB数据线将手机与电脑相连\n2. 手机进入开发者模式。勾选USB调试。并允许调试\n3. 电脑打开Chrome浏览器，在地址栏输入: chrome://inspect/1devices并勾选Discover USB devices选项\n4. 手机允许远程调试，并访问调试页面\n5. 电脑点击inspect 按钮8622\n6. 进入调试界面\n> 这种方法一般不推荐，直接使用手机扫码查看体验更佳\n\n\n### 代理调试\n\n之前使用手机利用fidder改代理抓包，现在也可以使用代理工具在手机上调试前端页面。原理如下：\n\n- 电脑作为代理服务器\n- 手机通过HTTP代理连接到电脑\n- 手机上的请求都经过代理服务器\n\n老师课堂上用的是Charles为例子，我就以之前手机上抓包为例了，亲测可行，详细步骤可以看这篇博客，需要安装证书才能抓取到HTTPS请求[【fiddler】用fiddler实现android手机抓包_michaelwoshi的博客-CSDN博客_fiddler手机抓包](https://blog.csdn.net/michaelwoshi/article/details/114173158)\n\n改完代理就可以使用手机访问开发环境页面了！其他常用工具如下：\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d84f0673cabe4810b9996efe6c1e8d0a~tplv-k3u1fbpfcp-watermark.image?)\n\n## 常用开发调试技巧\n\n### 线上及时修改Override\n\n1. 打开Sources面板下的的Overrides\n2. 点击Select folders for Overrides。选择一个本地的空文件夹目录。\n3. 允许授权\n4. 在page中修改代码，修改完成后保存\n5. 打开devTools ，点击右上角的三个小点 -> More tools ->  Changes，就能看到所有修改了\n\n记录的非常直观，改完刷新也不会再消失了，还能查看修改了那些地方\n\n### 利用代理解决开发阶段的跨域问题\n\n浏览器本身有一个 [同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy) ，不同源的请求会产生跨域问题，即协议、ip、端口号这三者有任何一个不同,就会产生跨域问题\n\n### 启用本地source map\n\n线上不存在Source Map时可以用Map Local网络映射功能来访问本地的Source Map文件\n\n### 小黄鸭调试大法！\n\n> 传说中程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭,然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。\n>\n> ——《程序员修炼之道》\n\n原来是出自这吗233333，这是梳理自己问题逻辑的一个好方法。\n\n## 总结感想\n\n前端开发的调试也是非常重要的一环，这节课非常详细的讲了PC端谷歌开发者工具的使用和移动端开发的调试，令人受益匪浅。\n\n> 本文引用的内容大部分来自秃头披风侠老师（？）的课、MDN以及一篇外部博客，[【fiddler】用fiddler实现android手机抓包_michaelwoshi的博客-CSDN博客_fiddler手机抓包](https://blog.csdn.net/michaelwoshi/article/details/114173158)\n\n","sources":["xlog"],"summary":"前端Debug的特点 多平台\n\n浏览器、Hybrid、NodeJs、小程序、桌面应用……\n\n多环境\n\n本地开发环境、线上环境\n\n多工具\n\nChrome devTools、Charles、Spy-Debugger、Whistle、vConsole……\n\n多技巧\n\nConsole…","attributes":[{"value":"development-and-debuggingmd","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/development-and-debuggingmd"],"date_published":"2022-01-20T14:30:17.000Z"}}}