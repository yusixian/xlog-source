{"characterId":52270,"noteId":41,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreigtos2lbqhvmgq6dtf4gexu26munlwstsqogupv4hbzjms4lwlj6a","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:39:04.000Z","updatedAt":"2023-04-05T11:29:03.000Z","deletedAt":null,"publishedAt":"2022-01-22T14:30:17.000Z","transactionHash":"0xdc576b85b753d220cd2851aa2bc5e951b6f739ada0a82dfd613ec82afbd0296e","blockNumber":30317649,"logIndex":7,"updatedTransactionHash":"0x9080d78a11e04f395f42e693d06bdd7dd8eaef797cfd4f5c83e3cc328a5640ac","updatedBlockNumber":30335048,"updatedLogIndex":0,"metadata":{"uri":"ipfs://bafkreigtos2lbqhvmgq6dtf4gexu26munlwstsqogupv4hbzjms4lwlj6a","type":"NOTE","content":{"tags":["post","前端","HTTP","网络协议","青训营"],"type":"note","title":"青训营 |「HTTP实用指南」","content":"---\ntitle: 青训营 |「HTTP实用指南」\nlink: note/front-end/bytedance-note/http-utilization-guide\ncatalog: true\ndate: 2022-01-22 14:30:17\nsubtitle: HTTP及其常见协议分析、报文结构、缓存策略分析，以及其具体的业务场景使用。 \nlang: cn\ntags:\n- 前端\n- HTTP\n- 网络协议\ncategories:\n- [笔记, 青训营笔记]\n---\n## 初识HTTP\n\n输入url -> browser进程处理输入信息 -> 浏览器内核向服务器发起请求 -> 浏览器内核读取响应 -> 浏览器内核进行渲染 -> browser进程页面加载完成\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a81ba0daea2499d9ca9253dd00a85f4~tplv-k3u1fbpfcp-watermark.image?)\n\n- Hyper Text Transfer Protocol （**HTTP**）超文本传输协议\n\n- 他是**应用层协议**，**基于传输层的TCP协议**\n\n- 请求、响应\n\n- 简单**可扩展**（可以自定义请求头，只要客户端服务端之间可以理解）\n\n- **无状态**\n\n  ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71a3574b7e6543d09c08554cafabdbbc~tplv-k3u1fbpfcp-watermark.image?)\n\n## 协议分析\n\n### 发展历程\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8fd8b74bdc34c1b9fd2d22fc14c7fb5~tplv-k3u1fbpfcp-watermark.image?)\n\n### 报文结构\n\n#### HTTP/1.1\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5850baf73f724ff5bcd11fdc34d78472~tplv-k3u1fbpfcp-watermark.image?)\n\n如图，可以看到请求和响应的请求头、返回的状态码、等等\n\n| Method  | 说明                                                         |\n| :-----: | ------------------------------------------------------------ |\n|   GET   | **请求一个指定资源**的表示形式，使用GET的请求应该只用于**获取数据** |\n|  POST   | 用于**将实体提交**到指定的资源，通常导致在服务器上的状态变化或副作用 |\n|   PUT   | 用请求有效载荷**替换目标资源的所有当前表示**                 |\n| DELETE  | **删除**指定的资源                                           |\n|  HEAD   | 请求一个与GET请求的响应相同的响应，但没有响应体（用的比较少） |\n| CONNECT | 建立一个到由目标资源标识的服务器的隧道。（用的比较少）       |\n| OPTIONS | 用于描述目标资源的通信选项。                                 |\n|  TRACE  | 沿着到目标资源的路径执行一个消息环回**测试**。（用的比较少） |\n|  PATCH  | 用于对资源**应用部分修改。**                                 |\n\n- Safe（安全的）：不会修改服务器数据的方法，如读数据 GET、HEAD、OPTIONS等\n\n- Idempotent（幂等）：同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的，所有safe的方法都是Idempotent的 如GET、HEAD、OPTIONS、PUT、DELETE等\n\n#### 状态码\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8e8407af23e4723a0c0e392d47b1ca6~tplv-k3u1fbpfcp-watermark.image?)\n\n- 200 OK - 客户端**请求成功**\n- 301 - 资源（网页等）被**永久转移**到了其它URL\n- 302 - **临时跳转**\n- 401 - Unauthorized - 请求未经授权\n- 404 - 请求资源不存在，可能是输入了错误的URL\n- 500 - 服务器内部发生了不可预期的错误\n- 504 Gateway Timeout - 网关或者代理的服务器无法在规定的时间内获得想要的响应\n\n#### RESTful API\n\n一种API设计风格：REST - Representational State Transfer\n\n- 每一个URI代表—种资源\n- 客户端和服务器之间，传递这种资源的某种**表现层**\n- 客户端通过HTTP method，对服务器端资源进行操作，实现\"**表现层状态转化**\"。\n\n| 请求            | 返回码                  |                             含义                             |\n| --------------- | ----------------------- | :----------------------------------------------------------: |\n| GET /zoos       | **2**00 OK              |           **列出所有**动物园，服务器**成功返回**了           |\n| POST /zoos      | **2**01 CREATED         |            **新建**一个动物园，服务器**创建成功**            |\n| PUT /zOos/ID    | **400 INVALID REQUEST** | **更新**某个指定动物园的信息(提供该动物园的全部信息)； 用户发出的请求有错误,服务器没有进行新建或修改数据的操作 |\n| DELETE /zoos/ID | **2**04 NO CONTENT      |               **删除**某个动物园，删除数据成功               |\n\n#### 常用请求头\n\n|      请求头       |                             说明                             |\n| :---------------: | :----------------------------------------------------------: |\n|      Accept       | 接收类型，表示浏览器支持的MIME类型**（对标服务端返回的Content-Type）** |\n|   Content-Type    |               客户端发送出去**实体内容的类型**               |\n|   Cache-Control   |         指定请求和响应遵循的**缓存机制**，如no-cache         |\n| lf-Modified-Since | 对应服务端的Last-Modified，用来**匹配看文件是否变动**，**只能精确到1s之内** |\n|      Expires      |   缓存控制，在这个时间内不会请求，直接使用缓存，服务端时间   |\n|      Max-age      | 代表资源在**本地缓存多少秒**，**有效时间内不会请求，而是使用缓存** |\n|   If-None-Match   | 对应服务端的ETag，用来**匹配文件内容是否改变 ** **（非常精确)** |\n|    **Cookie**     |             有cookie并且**同域**访问时会自动带上             |\n|      Referer      | 该页面的来源URL(适用于所有类型的请求，会**精确到详细页面地址**, csrf拦截常用到这个字段) |\n|      Origin       | 最初的请求是从哪里发起的（(只会**精确到端口**) ，Origin比Referer更尊重隐私** |\n|    User-Agent     |             用户客户端的一些必要信息，如UA头部等             |\n\n#### 常用响应头\n\n|           响应头            |                             说明                             |\n| :-------------------------: | :----------------------------------------------------------: |\n|        Content-Type         |                  服务端返回的实体内容的类型                  |\n|        Cache-Control        |           指定请求和响应遵循的缓存机制，如no-cache           |\n|       Last- Modified        |                    请求资源的最后修改时间                    |\n|           Expires           |        应该在什么时候认为文档已经过期，从而不再缓存它        |\n|           Max-age           |  客户端的本地资源应该缓存多少秒，开启了Cache-Control后有效   |\n|            ETag             |           资源的特定版本的标识符，Etags类似于指纹            |\n|         Set-Cookie          | **设置和页面关联的cookie**,服务器通过这个头部把cookie传给客户端 |\n|           Server            |                     服务器的一些相关信息                     |\n| Access-Control-Allow-Origin |             服务器端允许的请求Origin头部(如为*)              |\n\n#### 缓存\n\n**强缓存**\n\n本地有了直接用就好了\n\n- Expires（到期时间），时间戳\n- Cache-Control\n  - 可缓存性\n    - no-cache：协商缓存验证\n    - no-store：不使用任何缓存\n    - public、private等\n  - 到期\n    - max-age：单位是**秒**，存储的最大生存周期，**相对于请求**的时间\n  - 重新验证*重新加载\n    - must-revalidate：一旦资源过期，在成功向原始服务器验证之前，不能使用）（）\n\n**协商缓存**\n\n与Server端要通信，再确定要不要用它\n\n- Etag/If-None-Match：资源的**特定版本**的标识符，类似于指纹\n- Last-Modified/If-Modified-Since：**最后的修改时间**。（绝对的）\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa3937e36504331b968f36cc592ea69~tplv-k3u1fbpfcp-watermark.image?)\n\n#### Cookie\n\nSet-Cookie - response\n\n| Name=value                   | 各种cookie的名称和值                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| Expires=Date                 | Cookie的有效期，缺省时Cookie仅在浏览器关闭之前有效。         |\n| Path= Path                   | 限制指定Cookie的发送范围的文件目录，默认为当前               |\n| Domain=domain                | 限制cookie生效的域名，默认为创建cookie的服务域名             |\n| secure                       | 仅在HTTPS安全连接时，才可以发送Cookie                        |\n| HttpOnly                     | JavaScript脚本无法获得Cookie                                 |\n| SameSite=[None\\|Strict\\|Lax] | **None同站、跨站请求都可发送**；**Strict仅在同站发送** ；允许与顶级导航一起发送，并将与第三方网站发起的GET请求一起发送 |\n#### 发展\n\nHTTP/2概述：**更快**、更**稳定**、更**简单**\n\n- 帧(frame) \n\n  - HTTP/2通信的最小单位，每个帧都包含**帧头**，至少也会标识出当前帧所属的数据流。\n  - 1.0传输的是文本，而2中传的则是二进制数据，效率更高。并有新的压缩算法。\n\n  - ![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/877080ecc022407f98696529903fbfb9~tplv-k3u1fbpfcp-watermark.image?)\n\n- **消息**：与逻辑请求或响应消息对应的完整的一系列帧。\n\n- **数据流**：已建立的连接内的双向字节流，可以承载一条或多条消息。\n\n  - **交错发送**，接受方**重组织**。\n\n    ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8f4367cce8a442082ea52011ff2a9af~tplv-k3u1fbpfcp-watermark.image?)\n\n- HTTP/2连接都是**永久**的，而且仅需要每个来源一个连接\n- **流控制**：阻止发送方向接收方发送大量数据的机制\n- 服务器推送\n  - ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d4e113bad5648bc8af55a2718a1479b~tplv-k3u1fbpfcp-watermark.image?)\n\n\n\n#### HTTPS概述\n\n- HTTPS : Hypertext Transfer Protocol Secure\n\n- 经过TSL/SSL加密\n- 对称加密：加密和解密都是使用**同一个**密钥\n- 非对称加密：加密和解密需要使用两个不同的密钥：公钥（public key）和私钥（private key）\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1009e0f80d914907973254f7c8cc82b7~tplv-k3u1fbpfcp-watermark.image?)\n\n## 常见场景分析\n\n### 静态资源\n\n以 [今日头条](https://www.toutiao.com) 为例，打开网络面板查看其请求，找到css文件的请求。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8f6f35c47e54bb892d07ee1d4e7db2d~tplv-k3u1fbpfcp-watermark.image?)\n\n可以看到返回的状态码为200，那么是不是真的发起了请求呢（旁边的括号就说了，**从磁盘缓存**）\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04f6432045814362935592b3af367547~tplv-k3u1fbpfcp-watermark.image?)\n\n由上图响应头，可以看出：\n\n- 缓存策略？\n  - 强缓存（max-age=xxxxx）\n    - Cache-control：换算一下，1年\n- 其他信息？\n  - 允许所有域名访问（access-control-allow-origin）\n  - 资源类型：css（content-type）\n\n静态资源方案：缓存 + CDN + 文件名hash\n\n- CDN：Content Delivery Network\n- 通过用户就近性和服务器负载的判断，CDN确保内容以一种极为高效的方式为用户的请求提供服务\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cde86baff3c44f16b7f17b22e2c5ef9c~tplv-k3u1fbpfcp-watermark.image?)\n\n那么缓存期那么久，怎么保证用户拿到的内容是**最新**的呢？\n\n文件名hash，当文件内容有变化时文件名变换/加上版本号，这样缓存中的文件就无法match，就只能重新请求了。\n\n### 登陆 - 跨域\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14d0c5c682da4bc2981be6a10e7ed0e1~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93d61665e6c9484e8f23165d40e2e9ba~tplv-k3u1fbpfcp-watermark.image?)\n\n跨域问题，导致了请求方法为OPTION\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a5913eec32942e4887cb1b34250882a~tplv-k3u1fbpfcp-watermark.image?)\n\n**协议、主机名、端口**任意一者不同都会出现**跨域**问题（HTTP的默认端口号443）\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7d485f486e840459fcd1aaf2f127db5~tplv-k3u1fbpfcp-watermark.image?)\n\n#### 解决跨域问题\n\n- [跨源资源共享（CORS）](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)（ Cross-Origin Resource Sharing ） \n\n  - >`跨源资源共享` ([CORS](https://developer.mozilla.org/zh-CN/docs/Glossary/CORS))（或通俗地译为跨域资源共享）是一种基于 [HTTP](https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP) 头的机制，该机制通过允许服务器标示除了它自己以外的其它[origin](https://developer.mozilla.org/zh-CN/docs/Glossary/Origin)（域，协议和端口），这样浏览器可以访问加载这些资源。跨源资源共享还通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起一个到服务器托管的跨源资源的\"预检\"请求。在预检中，浏览器发送的头中标示有HTTP方法和真实请求中会用到的头。\n    >\n    >出于安全性，浏览器限制脚本内发起的跨源HTTP请求。 例如，`XMLHttpRequest` 和 [Fetch API](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API) 遵循[同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)。这意味着使用这些 API 的 Web 应用程序只能从加载应用程序的同一个域请求 HTTP 资源，**除非响应报文包含了正确 CORS 响应头。**\n\n  - 预请求：获知服务端是否允许该跨源请求（**复杂请求**）\n\n  - 相关协议头\n\n    - access-control-....\n\n- 代理服务器\n\n  - 同源策略是浏览器的安全策略，不是HTTP的\n\n- Iframe 诸多不便\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8def5bc00bf34904b2f174f4ea4b3205~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1330a016575f4d45be1b36544098b7da~tplv-k3u1fbpfcp-watermark.image?)\n\n如上图，登陆时向什么地址做了什么动作？\n\n- 使用了post方法\n- 目标域名：https://sso.toutiao.com\n- 目标为：path/quick_login/v2/\n\n携带了哪些信息，返回了哪些信息？\n\n- 携带信息\n  - Post body，数据格式为form\n  - 希望获取的数据格式为json\n  - 已有的cookie\n- 返回信息\n  - 数据格式json\n  - 种cookie的信息\n\n那么下一次进入页面的时候，为什么能够记住登陆态呢？\n\n#### 鉴权\n\n- Session + cookie （大部分这种门户网站）\n  - 用户发起提交请求给服务器，包括用户名密码等等\n  - 服务器处理，鉴别其正确性，若正确则返回Session将其种到cookie（Set-Cookie:session = ......）\n  - 用户再发送时：GET Cookie:session=....\n  - 服务器处理鉴别后返回一些登陆信息的\n- JWT（JSON web token）\n  - 服务器本地不会存储\n  - 返回的token唯一性，登陆时间短等\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94072b3ee6964bfe9ccd6d1a790996da~tplv-k3u1fbpfcp-watermark.image?)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50f8486f6a4b450c87558ff15c5a41c8~tplv-k3u1fbpfcp-watermark.image?)\n\n\n\n- SSO：单点登录（Single Sign On）\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2131c3a1abed46419607069afb8da352~tplv-k3u1fbpfcp-watermark.image?)\n\n如图，讲解的很清楚。\n\n## 实际应用\n\n[XMLHttpRequest - Web API 接口参考 | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)\n\n#### AJAX**之**XHR\n\n- XHR： XMLHttpRequest\n- readyState\n\n|      |                  |                                                  |\n| ---- | ---------------- | ------------------------------------------------ |\n| 0    | UNSENT           | 代理被创建，但尚未调用open()方法。               |\n| 1    | OPENED           | open()方法已经被调用。                           |\n| 2    | HEADERS_RECEIVED | send()方法已经被调用，并且头部和状态已经可获得。 |\n| 3    | LOADING          | 下载中; responseText 属性已经包含部分数据。      |\n| 4    | DONE             | 下载操作已完成。                                 |\n\n#### AJAX之Fetch\n\n- XMLHttpRequet的升级版\n- 使用Promise\n- 模块化设计，Response，Request，Header对象\n- 通过数据流处理对象，支持分块读取\n\n#### node中标准库: HTTP/HTTPS\n\n- 默认模块，无需安装其他依赖\n  功能有限/不是十分友好\n\n#### 常用的请求库: axios\n\n- [起步 | Axios 中文文档 ](https://www.axios-http.cn/docs/intro)\n- 支持浏览器、nodejs环境\n- 丰富的拦截器\n\n```js\n//全局配置\naxios.defaults.baseURL = \"https://api.example.com\";\n//添加请求拦截器\naxios.interceptors.request.use(function (config) {\n\t//在发送请求之前做些什么\n\treturn config;\n}，function (error) {\n\t//对请求错误做些什么\n\treturn Promise.reject(error );\n});\n\n//发送请求\naxios( { \n    method: 'get',\n    url: 'http://test.com',\n    responseType: 'stream\n    }).then( function(response) {\n    response.data.pipe( fs.createWriteStream('ada_lovelace.jpg'))\n});\n```\n\n#### 网络优化\n\n- [HTTP/2 - A Real-World Performance Test and Analysis | CSS-Tricks - CSS-Tricks](https://css-tricks.com/http2-real-world-performance-test-analysis/)\n\n  ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a15399deba94753848a5a4f8dcdb5b1~tplv-k3u1fbpfcp-watermark.image?)\n\n- 预解析、预连接等\n- 重试是保证稳定的有效手段，但要防止其加剧恶劣情况（比如网络连接就是断开了）。\n- 缓存合理使用，作为最后一道防线。\n\n## 了解更多\n\n### 不止HTTP协议一个选择\n\n#### 扩展 - 通信方式\n\n##### WebSocket\n\n- 浏览器与服务器进行**全双工通讯**的网络技术\n- 典型场景：实时性要求高，例如**聊天室**\n- URL使用**ws://**或wss://等开头\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ab8ceb356a8478aa0b717dae29bd5a0~tplv-k3u1fbpfcp-watermark.image?)\n\n##### UDP\n\nQUIC：Quick UDP Internet Connection 基于UDP\n\n- 0-RTT建联（**首次建联除外**)。\n- 类似TCP的**可靠传输**。\n- 类似TLS的**加密传输**，支持完美前向安全。\n- 用户空间的拥塞控制，最新的BBR算法。\n- 支持h2的基于流的多路复用，但没有 TCP的HOL问题。\n- 前向纠错FEC。\n- 类似MPTCP的Connection migration。\n- 应用暂不多\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abd89ebdecba43f680c1e1189bce987d~tplv-k3u1fbpfcp-watermark.image?)\n\n## 总结感想\n\n今天讲师小姐姐声音超温柔的介绍了HTTP及其常见协议分析、报文结构、缓存策略分析，还讲解了其具体的业务场景使用。 \n\n> 本文引用的内容大部分来自杨超男老师的课——HTTP实用指南\n\n","sources":["xlog"],"summary":"初识HTTP 输入url -> browser进程处理输入信息 -> 浏览器内核向服务器发起请求 -> 浏览器内核读取响应 -> 浏览器内核进行渲染 -> browser进程页面加载完成\n\nHyper Text Transfer Protocol （HTTP）超文本传输协议…","attributes":[{"value":"http-practical-guidemd","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/http-practical-guidemd"],"date_published":"2022-01-22T14:30:17.000Z"}}}