{"characterId":52270,"noteId":58,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreigedf6s3nswgmtmkjfu4yf2hjjz4oozj7qxp3mqqkezfsjkzdhx5y","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:39:52.000Z","updatedAt":"2023-04-05T06:39:52.000Z","deletedAt":null,"publishedAt":"2021-06-15T18:23:39.000Z","transactionHash":"0x16c8bbbc59b889d2e6569492006a2c6cfbcfe39cb15611ff19baebf93088d12d","blockNumber":30317697,"logIndex":5,"updatedTransactionHash":"0x16c8bbbc59b889d2e6569492006a2c6cfbcfe39cb15611ff19baebf93088d12d","updatedBlockNumber":30317697,"updatedLogIndex":5,"metadata":{"uri":"ipfs://bafkreigedf6s3nswgmtmkjfu4yf2hjjz4oozj7qxp3mqqkezfsjkzdhx5y","type":"NOTE","content":{"tags":["post","计算机组成原理"],"type":"note","title":"计算机组成原理复习总结（二）运算方法和运算器","content":"---\ntitle: 计算机组成原理复习总结（二）运算方法和运算器\nlink: 计算机组成原理复习总结（二）运算方法和运算器\ncatalog: true\nlang: cn\ndate:  2021-06-15 18:23:39 \nsubtitle: 包括数制与编码、定点数的表示和运算、浮点数的表示和运算、算术逻辑单元ALU\ntags:\n- 计算机组成原理\ncategories:\n- [笔记, CS基础]\n---\n\n# 第二章 运算方法和运算器\n## 2.1 数制与编码\n### 一、进位计数制及其相互转换\n10进制和R进制之间的转换\n**R进制到10进制**： \n\n$$ \\sum_{i = n}^{-m} k_i × r^i$$\neg:二进制数转换十进制数\n```c\n//二转十\nint bToD(char str[]) {\n    int sum = 0;\n    for(int i = 0; str[i] != '\\0'; i++) {\n        sum = sum*2 + (str[i] - '0');\n    }\n    return sum;\n}\n```\n\n**10进制到R进制**： \n\n - 整数部分：除r取余，r为进制基数\n - 小数部分：乘r取整代码如下\n```c\n//将十进制数n转化为k进制整数\nvoid dToK(int n, int k, char str[]) {\n    int i = 0;\n    if (n == 0) {\n        str[0] = '0';\n        return;\n    }\n    while(n) {\n        str[i++] =n % k + '0';\n        n = (n-n % k) / k;\n    }\n    i--;\n    //reverse\n    for (int j = 0; j < i; j++,i--) {\n        char t = str[j];\n        str[j] = str[i];\n        str[i] = t;\n    }\n}\n```\n### 二、真值和机器数\n - **真值**：一般书写的数 \n - **机器码**：机器中表示的数，要解决在计算机内部数的正、负符号和小数点运算问题。\n### 三、BCD码\n表示一位十进制数的二进制码的每一位有确定的权。一般用8421码，其4个二进制码的权从高到低分别为8、4、2和1。用0000，0001，...，1001分别表示0，1，...，9，每个数位内部满足二进制规则，而数位之间满足十进制规则，故称这种编码为“以二进制编码的十进制(binary coded decimal，简称BCD)码”。\n\n> 注意！\n>   **BCD码的取值是从0000到1001（也就是十进制的0到9）**\n>   有时对BCD码进行加法或减法会有这个范围以外的值出现，需要人为调整方能得出正确的结果。\n\n在计算机内部实现BCD码算术运算，要对运算结果进行**修正**，对加法运算的修正规则是:\n\n - 如果两个一位BCD码相加之和小于或等于(1001)~2~，即(9)~10~，不需要修正;\n```\n例1 ① 1+8 = 9\n  0 0 0 1\n+ 1 0 0 0 \n——————————\n  1 0 0 1 \n不需要修正\n```\n- 如相加之和**大于或等于(10)~10~**，要进行**加6修正**，并向**高位进位**，进位可以在首次相加(例1 ③)或修正时(例1 ②)产生。\n```\n例1 ② 4+9 = 13\n  0 1 0 0\n+ 1 0 0 1 \n——————————\n  1 1 0 1 \n+ 0 1 1 0  修正\n——————————\n1 0 0 1 1\n0001 0011即为13~\n③ 9+7 = 16\n  1 0 0 1\n+ 0 1 1 1\n——————————\n1 0 0 0 0\n+ 0 1 1 0 修正\n——————————\n1 0 1 1 0 \n0001 0110即为16~\n```\n### 四、字符与字符串\n#### 1、字符与字符串的表示方法\n符号数据:字符信息用数据表示，如**ASCII**等\n字符表示方法**ASCII**:用一个字节来表示,低7位用来编码(128),最高位为校验位，如图![在这里插入图片描述](https://img-blog.csdnimg.cn/20210614201629969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n\n字符串的存放方法:占用主存中连续的多个字节，**每个字节存一个字符**。\n#### 2、汉字的表示方法\n一级汉字3755个，二级汉字3008个\n汉字内码:汉字信息的存储,交换和检索的机内代码，**两个字节组成，每个字节高位都为1(区别于英文字符)**\n汉字字模码:汉字字形点阵\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210614201837788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n\n### 五、校验码（重点）\n推荐视频[3Blue1Brown的汉明码part1](https://www.bilibili.com/video/BV1WK411N7kz)、[3Blue1Brown的汉明码part2](https://www.bilibili.com/video/BV1pV411y7E8/)，讲的非常有趣！虽然主要讲汉明码，但对奇偶校验码也有详细描述。\n**校验码（只介绍奇偶校验码)**\n#### 引入\n信息传输和处理过程中受到干扰和故障，容易出错。\n#### 解决方法\n在有效信息中加入一些冗余信息（校验位)\n#### 定义\n设x=(x~0~ x~1~.x~n-1~)是一个n位字，则偶校验位C定义为:C=x~0~  ^ x~1~ ^ x~2~ ^ ... ^x~n-1~,式中^代表按位加，表明只有**当x中包含有偶数个1**时,才使C=0，否则C=1。只能检查出错，而不能纠正错误。同理可以定义奇校验。\n奇校验：包含奇数个1时才使得C=0,否则C=1\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210614202746877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n\n## 2.2 定点数的表示和运算（重点）\n\n### 一、定点数的表示\n#### 1、原码表示法\n**定点小数 x~n~.x~n-1~x~n-2~…..x~0~**，x为真值\n$$[x]_原 = \n\\begin{cases} \nx,  & \\text{0 ≤  x < 1 即 x为正数} \\\\\n1-x, & \\text{-1 < x ≤ 0 即 x为负数}\n\\end{cases}$$\n范围为2^-n^-1~1-2^-n^\neg：\nx = +0.1001，[x]原 = 0.1001 \nx = -0.1001，[x]原 = 1-(-0.1001)=1.1001\n\n**定点整数 x~n~x~n-1~x~n-2~…..x~0~**，x为真值\n$$[x]_原 = \n\\begin{cases} \nx,   & \\text{0 ≤ x < }2^n  即 x为正数\\\\\n2^n-x, & \\text{-2}^n<x≤ 0 {即x为负数}\n\\end{cases}$$\n范围为1-2^n^~2^n^-1\neg：\nx = +1001，[x]原 = 01001 \nx = -1001，[x]原 = 2^4^+1001=11001\n**有正0和负0之分！！**\n#### 2、反码表示法\n**定义**\n\n - **正数**的表示与原码、补码相同。\n - **负数**的反码**符号位为1**，**数值位**是将**原码的数值按位取反**，就得到该数的反码表示。\n - 电路容易实现，触发器的输出有正负之分。\n对尾数求反，反码跟补码的区别在于末位少加一个1，所以可以推出反码的定义\n\n**定点小数 x~n~.x~n-1~x~n-2~…..x~0~**，x为真值\n$$[x]_反 = \n\\begin{cases} \nx, & \\text{0 ≤  x < 1 即 x为正数} \\\\\n(2-2^{-n})+x, & \\text{-1 < x ≤ 0 即 x为负数}\n\\end{cases}$$\neg:\nX1=+0.1011011 , [X1]~反~ =0.1011011 \nX2= -0.1011011 , [X2]~反~ =1.0100100\n**定点整数 x~n~x~n-1~x~n-2~…..x~0~**，x为真值\n$$[x]_反 = \n\\begin{cases} \nx,  & \\text{0 ≤ x < }2^n  即 x为正数 \\\\\n(2^{n+1}-1)+x, & \\text{-2}^n<x≤ 0 {即x为负数}\n\\end{cases}$$\n**反码表示有正0和负0之分！！**\n#### 3、补码表示法\n **定义**\n正数的补码就是正数的本身，负数的补码是原负数加上模（原负数除符号位外取反，再加1）。 计算机运算受字长限制,属于有模运算。补码最大的优点就是将减法运算转换成加法运算。\n**定点小数x~n~x~n-1~x~n-2~…..x~0~，以2为模** \n$$[x]_补 = \n\\begin{cases} \nx,  & \\text{0 ≤  x < 1 即 x为正数} \\\\\n2+x, & \\text{-1 < x ≤ 0 即 x为负数}\n\\end{cases}$$\neg:  x= -0.1011，[x]~补~=10+x=10.0000-0.1011=1.0101 \n\ny=-0.01111 [y]~补~=10+y=10.00000-0.01111=1.10001\n**定点整数xnxn-1xn-2…..x0 ，以2^n+1^为模**\n$$[x]_补 = \n\\begin{cases} \nx,  & \\text{2}^n {＞x ≥ 0 即 x为正数} \\\\\n2^{n+1}+x, & \\text{0 ≥ x > -2}^n {即x为负数}\n\\end{cases}$$\n**补码性质:**\n - 高位表明正负\n - 正数补码，尾数与原码相同\n - 范围-2^n^~2^n^-1(定点整数）\n - **无正零和负零之分！！**\n\n#### 4、移码表示法\n用在阶码中，特点是**移码和补码尾数相同，符号位相反**\n范围:-2^n^~2^n^-1\neg：真值-1011111 \n 原码为11011111 \n 补码为10100001 \n 反码为10100000 \n 移码为00100001\n#### 5、总结\n\n - **若x为正数，[x]~原~ = [x]~补~ = [x]~反~**\n - **若x为负数**，**原码符号位为1不变**，整数的每一位二进制数位求反得到反码，反码符号位不变，反码数值位最低位加1，得到补码。\n - **移码和补码尾数相同，符号位相反**\n\n\n### 二、定点数的运算（重点）\n[计算机组成原理 定点运算-移位、加、减、乘、除](https://blog.csdn.net/gl620321/article/details/106534016?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242)\n#### 1、定点数的移位运算\n计算机中的移位是数据相对于小数点移位（左移或右移），数据移动，**小数点位置不发生变化**\n##### 有符号数的移位\n左移1位：机器数对应真值的绝对值变为原来2倍\n右移1位：机器数对应真值的绝对值变为原来1/2倍\n移位过程中，填补空位:\n\n - 负数数值部分和真值相同![在这里插入图片描述](https://img-blog.csdnimg.cn/2021061510432870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n\n##### 无符号数的移位\n - 逻辑左移 低位添0，高位移丢\n - 逻辑右移 高位添0，低位移丢\n\neg：\n01010011\n逻辑左移 所有位都参加移位操作 高位0移丢，最低位添0 ：10100110\n算术左移 第一个0表示符号位，这个数为正数，符号位不参与移位，移位的是后面的数据00100110\n\neg：\n10110010\n逻辑右移 所有位都参加移位操作 空出的最高位补0，最低位丢弃01011001\n算术右移 最高位不参与移位，符号位，表示负数，右移左侧空出最高位添1，右侧0丢弃11011001\n\n#### 2、补码加减法\n##### 补码加法\n公式：$$ [x+y]_补=[x]_补+[y]_补   (mod 2^{n+1}) \\\\\n |x|<(2n-1) ,   |y|<(2n-1) ,  |x+y|<(2n-1) $$  公式表明：在2^n+1^模意义下，**任意两数的补码之和等于该两数之和的补码**。\n 证明：\n （1）x > 0，y > 0，则x+y > 0，因正数的原码补码都一样，所以[x]~补~+[y]~补~  = x+y = [x+y]~补~\n \n （2）x > 0，y < 0，则x+y > 0或x+y < 0\n **[x]~补~= x，[y]~补~ = 2^n+1^+y**\n [x]~补~+[y]~补~  = (x+y)+2^n+1^ = [x+y]~补~ (mod 2^n+1^)\n \n （3）x < 0，y > 0，则x+y > 0或x+y < 0\n **[x]~补~=  2^n+1^+x，[y]~补~ = y**\n [x]~补~+[y]~补~  = (x+y)+2^n+1^ = [x+y]~补~ (mod 2^n+1^)\n \n （4）x < 0，y < 0，则x+y < 0\n **[x]~补~=  2^n+1^+x，[y]~补~ = 2^n+1^+y**\n [x]~补~+[y]~补~  = 2^n+1^+x + 2^n+1^+y\n =  2^n+1^+( 2^n+1^+x+y)\n =  [x+y]~补~ (mod 2^n+1^)\n\n\neg: x=+1011 , y=-0101 , 求 x+y=？\n 解：[x]~补~ = **0**1011, [y]~补~ = **1**1011\n 　　　　　[x]补　　　**0** 1 0 1 1\n 　　＋　　[y]补　　　**1** 1 0 1 1　　　\n 　　————————————————\n 　　　　[x+y]补　　**~~1~~  0** 0 1 1 0\n∴ x+y = +0110\n 1、符号位作为数的一部分参加运算。\n 2、在2n+1模意义下相加，即超过2n+1的进位要丢掉\n##### 补码减法\n为了将减法转变为加法，需证明公式：\n$$ [x-y]_补=[x]_补-[y]_补 = [x]_补+[-y]_补   (mod 2^{n+1}) $$\n [x-y]补= [x ]补- [ y]补=[x]补+[-y]补\n （证明） 为了求得同时[-y]补， 需要证明[-y]~补~=乛[y]~补~+2^-n^（意义是[-y]~补~等于[y]~补~包括符号位取反，末位加1）\n ∵  [x]~补~+[y]~补~ = [x+y]~补~ \n ∴  [y]~补~ = [x+y]~补~ -  [x]~补~\n 又∵  [x-y]~补~  =  [x+(-y)]~补~ =  [x]~补~+[-y]~补~\n ∴ [-y]~补~ = [x-y]~补~ - [x]~补~\n故[y]~补~ + [-y]~补~ \n= [x+y]~补~ -  [x]~补~ + [x-y]~补~ - [x]~补~\n= [x+y+x-y]~补~-[x+x]~补~\n= [x+x]~补~ - [x+x]~补~\n= 0\n故[-y]~补~ = -[y]~补~(mod 2^n+1^)\n\n**由[X]~补~求[-X]~补~:连符号位一起各位求反，末位加1**\n\n#### 3、定点数的乘除运算\n##### 乘法运算\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615165911334.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615173341744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615173417764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n\n\n##### 除法运算\n**恢复余数法**：将被除数－除数，\n结果大于0，商1，余数左移一位。\n结果小于0，商0，恢复余数，余数左移一位。\n重复上述操作，直至商的精度满足要求为止。\n\n不恢复余数法（ **加减交替法**）\n\n - **第一次**： 若**被除数与除数同号**，做**被除数减除**；若**被除数与除数异号**，做**被除数加除数**\n - 若**余数与除数同号**，**商1，余数左移**一位，**减除数**；若**余数与除数异号**，**商0，余数左移**一位，**加除数**\n - 商的末位恒置1（误差 2-n），余数可以是负的，不需要恢复余数。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615172953483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\neg:p44\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2021061517345746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n\n\n#### 4、溢出概念和判别方法\n##### 溢出的概念\n在定点整数机器中，数的表示范围 **|x| < (2^n^-1)** ，在运算过程中如果出现大于字长绝对值的现象，称为“溢出”。\n[例15] x=+1011 , y=+1001 , 求 x+y 。\n解：[x]~补~=01011 , [y]补=01001\n　　　[x]补　　　**0** 1 0 1 1\n＋　　[x]补　　　**0** 1 0 0 1　　\n——————————————\n　　[x+y]补　　　**1** 0 1 0 0\n\n两个正数相加的结果成为负数，称为**上溢**（结果大于机器所能表示的最大正数\n\n[例16] x=-1101 , y=-1011 , 求 x+y 。\n解：[x]补=10011 , [y]补=10101\n　　　[x]补　　　**1** 0 0 1 1\n＋　　[x]补　　　**1** 0 1 0 1　　\n——————————————\n　　[x+y]补　　　**0** 1 0 0 0\n两个负数相加的结果成为正数，称为**下溢**（结果小于机器所能表示的最小负数）\n##### 溢出的检测\n###### 双符号位法（变形补码）\n参与加减运算的数采用**变形补码**表示\n[x]~补~=2^n+2^+x    (mod 2^n+2^) \n[x+y]~补~=[x]~补~+[y]~补~   (mod 2^n+2^) \n\n - 两个符号位都参与运算 \n - 在2^n+2^模意义下相加，即最高符号位产生的进位要丢掉 \n　　　Sf1　SF2 \n  　　　 0　　 0　　　正确（正数）\n  　　　 0\t　1　　　上溢\n  　　　 1 　　0　　　下溢\n  　　　 1　　 1　　　正确（负数） \n  **两符号位相异**时，表示**溢出**；**相同**时，**没有溢出**。 无论是否溢出，**Sf1(即最高位) 表示结果正确的符号**\n#### 练习题\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210622103102351.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n  \n## 2.3 浮点数的表示和运算\n### 一、浮点数的表示\n浮点数的表示范围\n### 二、IEEE754标准。\n### 三、浮点数的加减运算\n1. 0操作数的**检查**,看有无简化操作的可能；\n2. **比较阶码**大小并完成**对阶**（小阶向大阶对齐）； \n3. **尾数**进行**加或减**运算；\n4. 结果**规格化**并进行**舍入**处理。\n\n#### 对阶\n实现使两数阶码相同的过程\n**对阶原则**：阶码小的数向阶码大的数对齐\n**对阶过程**：首先应求出两数阶码E~x~和E~y~之差，看是否相等。若不等，要通过尾数的移动以改变E~x~和E~y~，即对阶，使之相等。即小阶的尾数向右移动（相当于小数点左移），每右移一位，其阶码加1，直到两数的阶码相等为止，右移的位数等于阶差。\n#### 尾数求和\n方法和定点加减运算完全一样\n#### 规格化\n浮点数的规格化要求**尾数域的最高有效位应为1**，将运算结果**右移**以实现规格化称为**右规**，将运算结果**左移**以实现规格化称为**左规**\n\n**规格化数的判断方法**（单符号法）\n\n - 原码：不论正数还是负数，第一数位为1\n - 反码、补码：符号位和第一数位不同![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615174740285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n#### 舍入处理\n舍入处理的目的：在对阶或向右规格化时，尾数要向右移位，被右移的低位部分会被丢掉，造成一定误差。为了减小误差。\nIEEE754标准的舍入处理 \n - 就近舍入(0舍1入):类似”四舍五入”,丢弃的最高位为1，进1\n - 朝0舍入:简单的截尾 \n - 朝＋∞舍入:正数多余位不全为”0”,进1;负数,截尾 \n - 朝－∞ 舍入:负数多余位不全为”0”,进1;正数,截尾\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615175154740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615175250182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615175326164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615175355975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n\n\n## 2.4 算术逻辑单元ALU\n### 一、串行加法器和并行加法器\n一位全加器的逻辑表达式如下：\nF~i~ = A~i~ ⊕ B~i~ ⊕ C~n+i~\nC~n+i+1~ = A~i~B~i~ +  A~i~C~n+i~ +  B~i~C~n+i~ \n**C为进位**\n**串行加法器**\n - 只有一个全加器，数据逐位串行送入加法器中进行运算。进位触发器用来寄存进位信号，以便参与下一次运算。\n - 如果操作数长n位，加法就要分n次进行，每次产生一位和，并且串行逐位地送回寄存器。\n\n**并行加法器**\n - 并行加法器由多个全加器组成，其位数与机器的字长相同，各位数据同时运算。\n - 并行加法器的最长运算时间主要是由进位信号的传递时间决定的\n - 并行加法器的每个全加器都有一个从低位送来的进位输入和一个传送给高位的进位输出\n - 并行加法器的进位通常分为串行进位与并行进位。\n### 二、算术逻辑单元ALU的功能和结构\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615180544688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\nALU的逻辑图如上\nF~i~ = X~i~ ⊕ Y~i~ ⊕ C~n+1~\nC~n+i+1~ = X~i~Y~i~ +  Y~i~C~n+1~ +  X~i~C~n+1~ \n不同的控制参数可以得到不同的组合函数，从而能够实现多种算术运算和逻辑运算。\n\nXi和Yi 与控制参数和输入量的关系构造如下真值表\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210615181609181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODkwNTMz,size_16,color_FFFFFF,t_70)\n","sources":["xlog"],"attributes":[{"value":"ji-suan-ji-zu-cheng-yuan-li-fu-xi-zong-jie--er--yun-suan-fang-fa-he-yun-suan-qi-md","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/ji-suan-ji-zu-cheng-yuan-li-fu-xi-zong-jie--er--yun-suan-fang-fa-he-yun-suan-qi-md"],"date_published":"2021-06-15T18:23:39.000Z"}}}