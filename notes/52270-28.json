{"characterId":52270,"noteId":28,"linkItemType":null,"linkKey":"0x0000000000000000000000000000000000000000000000000000000000000000","deleted":false,"locked":false,"contractAddress":"0x0000000000000000000000000000000000000000","uri":"ipfs://bafkreifavloxxlwk7aadknrdva4ybztxnz7wqtf3k7sscvxfoxgdtl6sce","operator":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","owner":"0x679658be03475d0a5393c70ea0e9a1158dfae1ff","createdAt":"2023-04-05T06:38:05.000Z","updatedAt":"2023-04-05T06:38:05.000Z","deletedAt":null,"publishedAt":"2020-04-13T00:53:49.000Z","transactionHash":"0xbfab47b82ecebba6e9fc656935da117e29078d33b8ae11d03dbc25062e62f2ae","blockNumber":30317590,"logIndex":3,"updatedTransactionHash":"0xbfab47b82ecebba6e9fc656935da117e29078d33b8ae11d03dbc25062e62f2ae","updatedBlockNumber":30317590,"updatedLogIndex":3,"metadata":{"uri":"ipfs://bafkreifavloxxlwk7aadknrdva4ybztxnz7wqtf3k7sscvxfoxgdtl6sce","type":"NOTE","content":{"tags":["post","c++","算法","动态规划"],"type":"note","title":"动态规划学习笔记（1）","content":"---\ntitle: 动态规划学习笔记（1）\nlink: 动态规划学习笔记（1）\ncatalog: true\nlang: cn\ndate: 2020-04-13 00:53:49\nsubtitle: 转自慕课程序设计与算法（二）动态规划 ppt\ntags:\n- c++\n- 算法\n- 动态规划\ncategories:\n- [笔记, 算法]\n---\n\n记录一下慕课学习的笔记，以及例题代码\n## **一.递归到动规的一般转化方法**\n\n递归函数有n个参数就定义一个n维的数组， 数组的下标是递归函数参数的取值范围。\n这样就可以从边界值开始逐步填充数组，相当于计算递归函数值的逆过程。eg：例题1数字三角形\n\n\n## 二.动规解题的一般思路\n\n#### 1.将原问题分解为子问题\n\n将原问题分解为若干个子问题，与原问题的形式相同或类似，只不过规模小了。\n**子问题都解决，原问题即解决。**\n子问题的解一旦求出就会被保存，**所以每个子问题只要求解一次。**\n\n#### 2.确定状态\n\n**状态**：往往把和子问题相关的各个变量的一组取值称为一个状态。一个状态对应于一个或多个子问题。\n**值**：所谓某个状态下的值就是这个状态所对应的子问题的解。\n**时间复杂度**：整个问题的时间复杂度是状态数目乘以每个状态所需时间。\n**存储**：若K个整型变量能够构成一个状态，且取值范围分别为N1,N2,……,Nk，我们就可以用一个K维的数组array[N1][N2]……[Nk]来存储各个状态的“值”，这个值未必是一个整数或浮点数,甚至可能是需要一个结构表示的，故array可以是一个结构数组。\n\n\n#### 3.确定一些初始状态(边界状态)的值\n#### 4.确定状态转移方程\n\n定义出什么是状态，以及在该状态下的值后，就要找出不同的状态之间如何迁移。\n即**如何从一个或多个值已知的状态推出另一个状态的值**(\"人人为我\"递推型)。状态的迁移可以用递推公式表示，此递推公式也可称作\"状态转移方程\"。\n\n\n## 三.能用动规解决的问题的特点\n\n#### 1)问题具有最优子结构性质\n\n最优子结构性质:如果**问题的最优解所包含的子问题的解也是最优**的,称其具有该性质。\n\n#### 2)无后效性\n\n当前的若干个状态值一旦确定，则此后过程的演变就只和这若干个状态的值有关，与之前是采取哪种手段或经过哪条路径演变到当前这若干个状态无关。\n\n## 四.例题\n#### 例题1.数字三角形\n题意\n>:给定一个由n行数字组成的数字三角形如下图所示。试设计一个算法，计算出从三角形的顶至底的一条路径，使该路径经过的数字总和最大。\n对于给定的由n行数字组成的数字三角形，计算从三角形的顶至底的路径经过的数字和的最大值。\n> 输入数据的第1行是数字三角形的行数n，1≤n≤100。接下来n行是数字三角形各行中的数字。所有数字在0..99之间。\n> 输出数据只有一个整数，表示计算出的最大值。\n\n示例输入\n> 5\n7\n3 8\n8 1 0\n2 7 4 4\n4 5 2 6 5\n\n示例输出 \n> 30\n> \n\n代码1  记忆递归型动归程序\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#define MAX 101\nusing namespace std;\n//用递归的话会超时 重复计算太多\n//所以将每次递归的结果算出来存到数组里\n//叫做记忆递归型动归程序\nint D[MAX][MAX];//D[r][j]表示第r行第j个数字(r,j从1开始算)\nint maxSum[MAX][MAX];//从D(r,j)到底边的各条路径中，最佳路径的数字之和\nint n;\nint MaxSum(int i, int j) {\n    if (maxSum[i][j] != -1)\n        return maxSum[i][j];//若maxSum的值有被算过\n    if (i == n) \n        maxSum[i][j] = D[i][j];\n    else {\n        int x = MaxSum(i+1, j);\n        int y = MaxSum(i+1, j+1);\n        maxSum[i][j] = max(x, y) + D[i][j];\n    }\n    return maxSum[i][j];\n}\nint main(){\n    int i, j;\n    cin >> n;\n    for (i = 1; i <= n; i++) {\n        for (j = 1; j <= i; j++) {\n            cin >> D[i][j];\n            maxSum[i][j] = -1;\n        }\n    }\n    cout << MaxSum(1, 1) << endl;\n    return 0;\n}\n```\n代码2 循环 递推式 动态规划\n```cpp\n#include <iostream>\n#include <algorithm>\n#define MAX 101\nusing namespace std;\n//循环 递推式 动态规划\nint D[MAX][MAX];//D[r][j]表示第r行第j个数字(r,j从1开始算)\nint maxSum[MAX][MAX];//从D(r,j)到底边的各条路径中，最佳路径的数字之和\nint n;\nint main(){\n    int i, j;\n    cin >> n;\n    for (i = 1; i <= n; i++) {\n        for (j = 1; j <= i; j++) {\n            cin >> D[i][j];\n            maxSum[i][j] = -1;\n        }\n    }\n    for (i = 1; i <= n; i++)\n        maxSum[n][i] = D[n][i];\n    for (i = n-1; i >= 1; i--) {\n        for (j = 1; j <= i; j++) {\n            maxSum[i][j] = \n                max(maxSum[i+1][j], maxSum[i+1][j+1]) + D[i][j];\n        }\n    }\n    cout << maxSum[1][1] << endl;\n    return 0;\n}\n```\n#### 例题2.神奇的口袋\n题意\n\n> 有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不同的选择物品的方式。\n\n输入输出\n\n> 输入:\n3\n20\n20\n20\n输出: \n3\n\n代码\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nint a[30]; int N;\nint Ways[40][30];//Ways[i][j]表示从j种物品里凑出体积i的方法数\nint main() {\n    cin >> N;\n    memset(Ways, 0, sizeof(Ways));\n    for (int i = 1; i <= N; ++i) {\n        cin >> a[i]; Ways[0][i] = 1;\n    }\n    Ways[0][0] = 1;\n    for (int w = 1; w <= 40; w++) {\n        for (int k = 1; k <= N; k++) {\n            Ways[w][k] = Ways[w][k-1];\n            if (w-a[k] >= 0)\n                Ways[w][k] += Ways[w-a[k]][k-1];\n        }\n    }\n    cout << Ways[40][N];\n    return 0;\n}\n```\n#### 例题3.最长公共子序列\n题意\n\n> 给出两个字符串求一个最长的公共子序列的长度\n> \n输入输出\n> 输入:\nabcfbc abfcab\nprogramming contest\nabcd mnp\n输出:\n4\n2\n0\n\n代码\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nint dp[1001][1001];\n/*思路:设dp(i,j)表示s1左边i个字符形成的子串\n与s2左边j个字符形成的字串的最长公共子序列的长度\ndp(n,0) = 0, dp(0,n) = 0; \nif (s1[i-1] == s2[j-1]) dp(i,j) = dp(i-1,j-1) + 1;\nelse dp(i, j) = max(dp(i,j-1), dp(i-1,j));*/\nint main() {\n    string s1, s2;\n    cin >> s1 >> s2;\n    int len1 = s1.length();\n    int len2 = s2.length();\n    for (int i = 1; i <= len1; i++) {\n        for (int j = 1; j <=len2; j++) {\n            if(s1[i-1] == s2[j-1]) \n                dp[i][j] = dp[i-1][j-1] + 1;\n            else \n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]);\n        }\n    }\n    cout << dp[len1][len2] << endl;\n    return 0;\n}\n```\n\n#### 例题4.最长上升子序列\n题意\n\n> 输入第一行序列的长度N，第二行N个整数\n> 输出最长上升子序列的长度\n> \n输入输出\n>输入样例:\n7\n1 7 3 5 9 4 8\n输出样例:\n4\n\n代码\n\n```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 1010;\n/*思路:分解为求以ak为终点的最长上升子序列的长度 ，maxLen(k)表示以ak为终点的最长上升子序列长度\n为在ak左边 且ai小于ak 长度最大的最长上升子序列的长度+1\n因为ak左边任何终值小于ak的子序列加上ak后就能形成一个更长的上升子序列*/\nint a[maxn]; int maxLen[maxn];\nint main() {\n    int N, ans = -1;  cin >> N;\n    for (int i = 1; i <= N; i++) {\n        cin >> a[i]; maxLen[i] = 1;\n    }\n    for (int i = 2; i <= N; i++) {\n        //每次求以第i个数为终点的最长上升子序列的长度\n        for(int j = 1; j < i; j++) {\n            //以第j个数为终点的最长上升子序列\n            if (a[j] < a[i]) {\n                maxLen[i] = max(maxLen[i], maxLen[j]+1);\n            }\n        }\n    }\n    for (int i = 1; i <= N; i++) {\n        if(maxLen[i] > ans) ans = maxLen[i];\n    }\n    cout << ans << endl;\n    return 0;\n}\n//时间复杂度O(N^2)\n```\n\n转自慕课程序设计与算法（二）动态规划 ppt\n","sources":["xlog"],"attributes":[{"value":"dong-tai-gui-hua-xue-xi-bi-ji-1md","trait_type":"xlog_slug"}],"external_urls":["https://cosine.xlog.app/dong-tai-gui-hua-xue-xi-bi-ji-1md"],"date_published":"2020-04-13T00:53:49.000Z"}}}